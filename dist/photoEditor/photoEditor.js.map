{"version":3,"sources":["../../src/photoEditor/photoEditor.js"],"names":["pesdkServer","PesdkServer","license","lisence","editor","preferredRenderer","export","format","type","SDK","RenderType","BUFFER","assets","baseUrl","configuration","version","operations","options","intensity","identifier","result","ImageLoader","load","then","inputImage","setImage","render","outputImageBuffer","console","log","catch","e"],"mappings":";;AAAA;;;;AACA;;;;;;AAEA,MAAMA,cAAc,IAAIC,8BAAJ,CAAgB;AAClCC,WAASC,iBADyB,EAChB;AAClBC,UAAQ;AACNC,uBAAmB,OADb,EACsB;AAC5BC,YAAQ;AACNC,cAAQ,YADF;AAENC,YAAMP,+BAAYQ,GAAZ,CAAgBC,UAAhB,CAA2BC;AAF3B;AAFF,GAF0B;AASlCC,UAAQ;AACNC,aAAS,8CADH,CACkD;AADlD;AAT0B,CAAhB,CAApB;;AAcA;AAjBiD;AAkBjD,MAAMC,gBAAgB;AACpBC,WAAS,OADW;AAEpBC,cAAY,CACV;AACER,UAAM,QADR;AAEES,aAAS;AACPC,iBAAW,CADJ;AAEPC,kBAAY;AAFL;AAFX,GADU;AAFQ,CAAtB;;AAaA;AACA,MAAMC,SAASnB,+BAAYoB,WAAZ,CAAwBC,IAAxB,CAA6B,oBAA7B,EAAmDC,IAAnD,CACbC,cAAc;AACZxB,cAAYyB,QAAZ,CAAqBD,UAArB;AACAxB,cAAY0B,MAAZ,CAAmBZ,aAAnB,EAFY,CAEuB;AACpC,CAJY,CAAf;;AAOA;AACA;AACA;AACA;;AAEA;AACAM,OACGG,IADH,CACQI,qBAAqB;AACzB;AACAC,UAAQC,GAAR,CAAY,OAAZ;AACD,CAJH,EAKGC,KALH,CAKSC,KAAK;AACVH,UAAQC,GAAR,CAAYE,CAAZ;AACD,CAPH","file":"photoEditor.js","sourcesContent":["import PesdkServer from \"photoeditorsdk-server\"; // require the sdk\nimport lisence from \"./lisence\";\n\nconst pesdkServer = new PesdkServer({\n  license: lisence, // <-- Please replace this with your license. Please make sure this is in *string* format, not *object*.\n  editor: {\n    preferredRenderer: \"webgl\", // or 'canvas'\n    export: {\n      format: \"image/jpeg\",\n      type: PesdkServer.SDK.RenderType.BUFFER\n    }\n  },\n  assets: {\n    baseUrl: \"../node_modules/photoeditorsdk-server/assets\" // <-- This should be the absolute path to your `assets` directory\n  }\n});\n\n// example that converts the image to black and white\nconst configuration = {\n  version: \"3.0.0\",\n  operations: [\n    {\n      type: \"filter\",\n      options: {\n        intensity: 1,\n        identifier: \"imgly_lut_bw\"\n      }\n    }\n  ]\n};\n\n/** Variant 1: Load image data and call PesdkServer#setImage directly **/\nconst result = PesdkServer.ImageLoader.load(\"URI TO INPUT IMAGE\").then(\n  inputImage => {\n    pesdkServer.setImage(inputImage);\n    pesdkServer.render(configuration); // Apply the serialization to the input image\n  }\n);\n\n/** Variant 2: Update image uri in serialization file **/\n// serialization.image |= {}\n// serialization.image.uri = 'URI TO INPUT IMAGE'\n// const result = pesdkServer.render(serialization) // Apply the serialization to the input image\n\n// Finally wait for the promise to be resolved and process the resulting output image buffer\nresult\n  .then(outputImageBuffer => {\n    // do Something with the image data. e.g. write to file\n    console.log(\"Done!\");\n  })\n  .catch(e => {\n    console.log(e);\n  });\n"]}