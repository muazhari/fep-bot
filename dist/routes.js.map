{"version":3,"sources":["../src/routes.js"],"names":["line","routes","post","req","res","t0","Date","getTime","console","log","body","destination","Array","isArray","events","status","end","Promise","all","map","event","Bot","then","result","json","catch","err","t1","tDelta","get","render","title","next","query","Error"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;IAAYA,I;;AAEZ;;;;;;AAEA,MAAMC,SAAS,sBAAf;;AAEA;;;;AAIA;AACA;AACAA,OAAOC,IAAP,CAAY,UAAZ,EAAwB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpC,QAAMC,KAAK,IAAIC,IAAJ,GAAWC,OAAX,EAAX;AACAC,UAAQC,GAAR,CAAa,0CAAyCJ,EAAG,EAAzD;;AAEA,MAAIF,IAAIO,IAAJ,CAASC,WAAb,EAA0B;AACxBH,YAAQC,GAAR,CAAY,uBAAZ,EAAqCN,IAAIO,IAAJ,CAASC,WAA9C;AACD;;AAED;AACA,MAAI,CAACC,MAAMC,OAAN,CAAcV,IAAIO,IAAJ,CAASI,MAAvB,CAAL,EAAqC;AACnC,WAAOV,IAAIW,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACD;;AAED;AACAC,UAAQC,GAAR,CACEf,IAAIO,IAAJ,CAASI,MAAT,CAAgBK,GAAhB,CAAoBC,SAAS;AAC3B,QAAIC,QAAJ,CAAQ,EAAED,KAAF,EAAR;AACD,GAFD,CADF,EAKGE,IALH,CAKQC,UAAUnB,IAAIoB,IAAJ,CAASD,MAAT,CALlB,EAMGE,KANH,CAMSC,OAAO;AACZlB,YAAQC,GAAR,CAAYiB,GAAZ;AACAtB,QAAIW,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACA,UAAMU,GAAN;AACD,GAVH;;AAYA,QAAMC,KAAK,IAAIrB,IAAJ,GAAWC,OAAX,EAAX;AACA,QAAMqB,SAASD,KAAKtB,EAApB;AACAG,UAAQC,GAAR,CAAa,0CAAyCmB,MAAO,EAA7D;AACD,CA7BD;;AA+BA;;;AAGA3B,OAAO4B,GAAP,CAAW,GAAX,EAAgB,CAAC1B,GAAD,EAAMC,GAAN,KAAc;AAC5BA,MAAI0B,MAAJ,CAAW,OAAX,EAAoB,EAAEC,OAAO,0BAAT,EAApB;AACD,CAFD;;AAIA;;;;;;;;;AASA9B,OAAO4B,GAAP,CAAW,OAAX,EAAoB,CAAC1B,GAAD,EAAMC,GAAN,EAAW4B,IAAX,KAAoB;AACtC,QAAM,EAAED,KAAF,KAAY5B,IAAI8B,KAAtB;;AAEA,MAAIF,SAAS,IAAT,IAAiBA,UAAU,EAA/B,EAAmC;AACjC;AACA;AACA;AACA;AACAC,SAAK,IAAIE,KAAJ,CAAU,mCAAV,CAAL;AACA;AACD;;AAED9B,MAAI0B,MAAJ,CAAW,OAAX,EAAoB,EAAEC,KAAF,EAApB;AACD,CAbD;;kBAee9B,M","file":"routes.js","sourcesContent":["import { Router } from \"express\";\nimport axios from \"axios\";\nimport * as line from \"@line/bot-sdk\";\n\nimport { Bot } from \"./Bot\";\n\nconst routes = Router();\n\n/**\n * Bot Webhook\n */\n\n// register a webhook handler with middleware\n// about the middleware, please refer to doc\nroutes.post(\"/webhook\", (req, res) => {\n  const t0 = new Date().getTime();\n  console.log(`[ROUTES] /webhook transmission at time ${t0}`);\n  \n  if (req.body.destination) {\n    console.log(\"Destination User ID: \", req.body.destination);\n  }\n\n  // req.body.events should be an array of events\n  if (!Array.isArray(req.body.events)) {\n    return res.status(500).end();\n  }\n\n  //handle events separately\n  Promise.all(\n    req.body.events.map(event => {\n      new Bot({ event });\n    })\n  )\n    .then(result => res.json(result))\n    .catch(err => {\n      console.log(err);\n      res.status(500).end();\n      throw err;\n    });\n  \n  const t1 = new Date().getTime();\n  const tDelta = t1 - t0;\n  console.log(`[ROUTES] /webhook transmission done in ${tDelta}`);\n});\n\n/**\n * GET home page\n */\nroutes.get(\"/\", (req, res) => {\n  res.render(\"index\", { title: \"fep-bot splash web yeah!\" });\n});\n\n/**\n * GET /list\n *\n * This is a sample route demonstrating\n * a simple approach to error handling and testing\n * the global error handler. You most certainly want to\n * create different/better error handlers depending on\n * your use case.\n */\nroutes.get(\"/list\", (req, res, next) => {\n  const { title } = req.query;\n\n  if (title == null || title === \"\") {\n    // You probably want to set the response HTTP status to 400 Bad Request\n    // or 422 Unprocessable Entity instead of the default 500 of\n    // the global error handler (e.g check out https://github.com/kbariotis/throw.js).\n    // This is just for demo purposes.\n    next(new Error('The \"title\" parameter is required'));\n    return;\n  }\n\n  res.render(\"index\", { title });\n});\n\nexport default routes;\n"]}