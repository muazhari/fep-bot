{"version":3,"sources":["../src/routes.js"],"names":["line","routes","post","req","res","body","destination","console","log","Array","isArray","events","status","end","Promise","all","map","event","err","then","result","json","catch","get","render","title","next","query","Error"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;IAAYA,I;;AAEZ;;;;;;AAEA,MAAMC,SAAS,sBAAf;;AAEA;;;;AAKA;AACA;AACAA,OAAOC,IAAP,CAAY,UAAZ,EAAwB,CAACC,GAAD,EAAMC,GAAN,KAAc;AACpC,MAAID,IAAIE,IAAJ,CAASC,WAAb,EAA0B;AACxBC,YAAQC,GAAR,CAAY,uBAAZ,EAAqCL,IAAIE,IAAJ,CAASC,WAA9C;AACD;;AAED;AACA,MAAI,CAACG,MAAMC,OAAN,CAAcP,IAAIE,IAAJ,CAASM,MAAvB,CAAL,EAAqC;AACnC,WAAOP,IAAIQ,MAAJ,CAAW,GAAX,EAAgBC,GAAhB,EAAP;AACD;;AAED;AACAC,UAAQC,GAAR,CAAYZ,IAAIE,IAAJ,CAASM,MAAT,CAAgBK,GAAhB,CAAoBC,SAAS;AACvC,QAAI;AACF,2BAAWA,KAAX;AACD,KAFD,CAEE,OAAOC,GAAP,EAAW;AACX,YAAMA,GAAN;AACD;AACF,GANW,CAAZ,EAOGC,IAPH,CAOQC,UAAUhB,IAAIiB,IAAJ,CAASD,MAAT,CAPlB,EAQGE,KARH,CAQSJ,OAAO;AACZX,YAAQC,GAAR,CAAYU,GAAZ;AACAd,QAAIQ,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACA,UAAMK,GAAN;AACD,GAZH;AAaD,CAxBD;;AA2BA;;;AAGAjB,OAAOsB,GAAP,CAAW,GAAX,EAAgB,CAACpB,GAAD,EAAMC,GAAN,KAAc;AAC5BA,MAAIoB,MAAJ,CAAW,OAAX,EAAoB,EAAEC,OAAO,0BAAT,EAApB;AACD,CAFD;;AAIA;;;;;;;;;AASAxB,OAAOsB,GAAP,CAAW,OAAX,EAAoB,CAACpB,GAAD,EAAMC,GAAN,EAAWsB,IAAX,KAAoB;AACtC,QAAM,EAAED,KAAF,KAAYtB,IAAIwB,KAAtB;;AAEA,MAAIF,SAAS,IAAT,IAAiBA,UAAU,EAA/B,EAAmC;AACjC;AACA;AACA;AACA;AACAC,SAAK,IAAIE,KAAJ,CAAU,mCAAV,CAAL;AACA;AACD;;AAEDxB,MAAIoB,MAAJ,CAAW,OAAX,EAAoB,EAAEC,KAAF,EAApB;AACD,CAbD;;kBAeexB,M","file":"routes.js","sourcesContent":["import { Router } from 'express';\nimport axios from 'axios'\nimport * as line from '@line/bot-sdk';\n\nimport { handlerBot } from './Bot'\n\nconst routes = Router();\n\n/**\n * Bot Webhook\n */\n\n\n// register a webhook handler with middleware\n// about the middleware, please refer to doc\nroutes.post('/webhook', (req, res) => {\n  if (req.body.destination) {\n    console.log(\"Destination User ID: \", req.body.destination);\n  }\n  \n  // req.body.events should be an array of events\n  if (!Array.isArray(req.body.events)) {\n    return res.status(500).end();\n  }\n  \n  //handle events separately\n  Promise.all(req.body.events.map(event => {\n    try {\n      handlerBot(event)\n    } catch (err){\n      throw err\n    }\n  }))\n    .then(result => res.json(result))\n    .catch(err => {\n      console.log(err)\n      res.status(500).end();\n      throw err\n    })\n})\n\n\n/**\n * GET home page\n */\nroutes.get('/', (req, res) => {\n  res.render('index', { title: 'fep-bot splash web yeah!' });\n});\n\n/**\n * GET /list\n *\n * This is a sample route demonstrating\n * a simple approach to error handling and testing\n * the global error handler. You most certainly want to\n * create different/better error handlers depending on\n * your use case.\n */\nroutes.get('/list', (req, res, next) => {\n  const { title } = req.query;\n\n  if (title == null || title === '') {\n    // You probably want to set the response HTTP status to 400 Bad Request\n    // or 422 Unprocessable Entity instead of the default 500 of\n    // the global error handler (e.g check out https://github.com/kbariotis/throw.js).\n    // This is just for demo purposes.\n    next(new Error('The \"title\" parameter is required'));\n    return;\n  }\n\n  res.render('index', { title });\n});\n\nexport default routes;\n"]}