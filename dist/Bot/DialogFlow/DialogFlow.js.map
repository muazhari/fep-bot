{"version":3,"sources":["../../../src/Bot/DialogFlow/DialogFlow.js"],"names":["DialogFlow","constructor","Bot","agent","default_agent","projectId","config","sessionId","uuid","v4","sessionClient","dialogflow","SessionsClient","sessionPath","propsId","getId","origin","getParameter","responses","fields","queryResult","parameters","displayName","intent","allRequiredParamsPresent","getQuery","msg","query","session","queryInput","text","languageCode","chatGate","parameter","chatCallback","shared_props","dialogFlow","isTalking","Object","keys","includes","JSON","parse","chat","stringValue","Promise","resolve","reject","message","props","event","detectIntent","then","fulfillmentText","length","console","log","stringify","err"],"mappings":"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","file":"DialogFlow.js","sourcesContent":["import dialogflow from \"dialogflow\";\nimport uuid from \"uuid\";\nimport {default_agent} from \"../../Config/DialogFlow\";\nimport {shared_props} from \"../../Bot\";\n\nexport class DialogFlow {\n  constructor(Bot) {\n    this.Bot = Bot;\n\n    // selected agent\n    this.agent = default_agent;\n    this.projectId = this.agent.projectId;\n    this.config = this.agent.config;\n\n    // A unique identifier for the given session\n    this.sessionId = uuid.v4();\n\n    // Create a new session\n    this.sessionClient = new dialogflow.SessionsClient(this.config);\n    this.sessionPath = this.sessionClient.sessionPath(this.projectId, this.sessionId);\n\n    this.propsId = this.Bot.getId().origin;\n  }\n  getParameter(responses) {\n    const {fields} = responses[0].queryResult.parameters;\n    const {displayName} = responses[0].queryResult.intent;\n    const {allRequiredParamsPresent} = responses[0].queryResult;\n    return {displayName, fields, allRequiredParamsPresent};\n  }\n\n  getQuery(msg) {\n    const query = {\n      session: this.sessionPath,\n      queryInput: {\n        text: {\n          // The query to send to the dialogflow agent\n          text: msg,\n          // The language used by the client (en-US/id)\n          languageCode: \"id\"\n        }\n      }\n    };\n    return query;\n  }\n\n  chatGate(parameter, chatCallback) {\n    const {fields, displayName} = parameter;\n    if (shared_props[this.propsId].dialogFlow.isTalking || displayName === \"chat.talk\") {\n      if (Object.keys(fields).includes(\"chat\")) {\n        shared_props[this.propsId][\"dialogFlow\"][\"isTalking\"] = JSON.parse(fields.chat.stringValue);\n      }\n      return chatCallback();\n    }\n    shared_props[this.propsId][\"dialogFlow\"][\"isTalking\"] = false;\n  }\n\n  // Send request and log result\n  chat() {\n    return new Promise((resolve, reject) => {\n      try {\n        const {message} = this.Bot.props.event;\n        const query = this.getQuery(message.text);\n        this.sessionClient.detectIntent(query).then(responses => {\n          const parameter = this.getParameter(responses);\n\n          const {queryResult} = responses[0];\n          const {fulfillmentText} = queryResult;\n\n          const chatCallback = () => {\n            return resolve({fulfillmentText, parameter});\n          };\n\n          if (fulfillmentText.length >= 1) {\n            this.chatGate(parameter, chatCallback);\n          }\n  \n          \n          console.log(\"isTalking\", shared_props[this.propsId].dialogFlow.isTalking);\n          console.log(\"parameter\", JSON.stringify(parameter));\n          console.log(\"Detected intent\", responses[0].queryResult.displayName);\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n}\n"]}