{"version":3,"sources":["../../../src/Bot/DialogFlow/DialogFlow.js"],"names":["DialogFlow","Bot","message","source","props","event","projectId","sessionId","uuid","v4","sessionClient","dialogflow","SessionsClient","config","sessionPath","get_parameter","responses","fields","queryResult","parameters","displayName","intent","allRequiredParamsPresent","get_query","msg","query","session","queryInput","text","languageCode","talk_check","parameter","Object","keys","includes","shared_props","getId","default","chat","stringValue","talk","detectIntent","fulfillmentText","status","undefined","length","replyText","console","log"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEO,MAAMA,kCAAaC,OAAO;AAC/B,QAAM,EAAEC,OAAF,EAAWC,MAAX,KAAsBF,IAAIG,KAAJ,CAAUC,KAAtC;AACA,QAAMC,YAAY,iBAAlB;AACA;AACA,QAAMC,YAAYC,eAAKC,EAAL,EAAlB;;AAEA;AACA,QAAMC,gBAAgB,IAAIC,qBAAWC,cAAf,CAA8BC,oBAA9B,CAAtB;AACA,QAAMC,cAAcJ,cAAcI,WAAd,CAA0BR,SAA1B,EAAqCC,SAArC,CAApB;;AAEA,QAAMQ,gBAAgBC,aAAa;AACjC,UAAM,EAAEC,MAAF,KAAaD,UAAU,CAAV,EAAaE,WAAb,CAAyBC,UAA5C;AACA,UAAM,EAAEC,WAAF,KAAkBJ,UAAU,CAAV,EAAaE,WAAb,CAAyBG,MAAjD;AACA,UAAM,EAAEC,wBAAF,KAA+BN,UAAU,CAAV,EAAaE,WAAlD;AACA,WAAO,EAAEE,WAAF,EAAeH,MAAf,EAAuBK,wBAAvB,EAAP;AACD,GALD;;AAOA,QAAMC,YAAYC,OAAO;AACvB,UAAMC,QAAQ;AACZC,eAASZ,WADG;AAEZa,kBAAY;AACVC,cAAM;AACJ;AACAA,gBAAMJ,GAFF;AAGJ;AACAK,wBAAc;AAJV;AADI;AAFA,KAAd;AAWA,WAAOJ,KAAP;AACD,GAbD;;AAeA,QAAMK,aAAaC,aAAa;AAC9B,UAAM,EAAEd,MAAF,EAAUG,WAAV,KAA0BW,SAAhC;AACA,QAAIX,gBAAgB,WAAhB,IAA+BA,gBAAgB,aAAnD,EAAkE;AAChE,UAAIY,OAAOC,IAAP,CAAYhB,MAAZ,EAAoBiB,QAApB,CAA6B,MAA7B,CAAJ,EAA0C;AACxCC,+BAAalC,IAAImC,KAAJ,GAAYC,OAAzB,EAAkC,QAAlC,IAA8CpB,OAAOqB,IAAP,CAAYC,WAAZ,KAA4B,MAA1E;AACD;AACF;AACF,GAPD;;AAUA;AACA,QAAMC,OAAO,MAAMhB,GAAN,IAAa;AACxB,UAAMC,QAAQF,UAAUC,GAAV,CAAd;AACA,UAAMR,YAAY,MAAMN,cAAc+B,YAAd,CAA2BhB,KAA3B,CAAxB;AACA,UAAMM,YAAYhB,cAAcC,SAAd,CAAlB;AACA,UAAM,EAAEE,WAAF,KAAkBF,UAAU,CAAV,CAAxB;AACA,UAAM,EAAE0B,eAAF,KAAuBxB,WAA7B;;AAEA,UAAMyB,SAASR,uBAAalC,IAAImC,KAAJ,GAAYC,OAAzB,EAAkCM,MAAlC,KAA6CC,SAA7C,GAAwD,KAAxD,GAAgET,uBAAalC,IAAImC,KAAJ,GAAYC,OAAzB,EAAkCM,MAAjH;;AAEA,QAAIA,UAAUD,gBAAgBG,MAAhB,IAA0B,CAAxC,EAA2C;AACzC5C,UAAI6C,SAAJ,CAAcJ,eAAd;AACD;;AAEDZ,eAAWC,SAAX;;AAEA;AACAgB,YAAQC,GAAR,CAAY,WAAZ,EAAyBjB,SAAzB;AACAgB,YAAQC,GAAR,CAAY,cAAZ,EAA4Bb,uBAAalC,IAAImC,KAAJ,GAAYC,OAAzB,EAAkCM,MAA9D,EAAsEA,MAAtE;AACAI,YAAQC,GAAR,CAAY,iBAAZ,EAA+BhC,UAAU,CAAV,EAAaE,WAAb,CAAyBE,WAAxD;AACD,GAnBD;;AAqBA,SAAO;AACLoB;AADK,GAAP;AAGD,CAnEM","file":"DialogFlow.js","sourcesContent":["import dialogflow from \"dialogflow\";\nimport uuid from \"uuid\";\nimport config from \"../../Config/DialogFlow\";\nimport { shared_props } from \"../../Bot/internal\";\n\nexport const DialogFlow = Bot => {\n  const { message, source } = Bot.props.event;\n  const projectId = \"newagent-nlaqvy\";\n  // A unique identifier for the given session\n  const sessionId = uuid.v4();\n\n  // Create a new session\n  const sessionClient = new dialogflow.SessionsClient(config);\n  const sessionPath = sessionClient.sessionPath(projectId, sessionId);\n\n  const get_parameter = responses => {\n    const { fields } = responses[0].queryResult.parameters;\n    const { displayName } = responses[0].queryResult.intent;\n    const { allRequiredParamsPresent } = responses[0].queryResult\n    return { displayName, fields, allRequiredParamsPresent }\n  };\n  \n  const get_query = msg => {\n    const query = {\n      session: sessionPath,\n      queryInput: {\n        text: {\n          // The query to send to the dialogflow agent\n          text: msg,\n          // The language used by the client (en-US/id)\n          languageCode: \"id\"\n        }\n      }\n    };\n    return query;\n  };\n  \n  const talk_check = parameter => {\n    const { fields, displayName } = parameter\n    if (displayName === \"chat.talk\" || displayName === \"chat.silent\") {\n      if (Object.keys(fields).includes(\"chat\")) {\n        shared_props[Bot.getId().default][\"status\"] = fields.chat.stringValue === \"true\";\n      }\n    }\n  }\n    \n\n  // Send request and log result\n  const talk = async msg => {\n    const query = get_query(msg);\n    const responses = await sessionClient.detectIntent(query);\n    const parameter = get_parameter(responses)\n    const { queryResult } = responses[0];\n    const { fulfillmentText }  = queryResult\n\n    const status = shared_props[Bot.getId().default].status === undefined? false : shared_props[Bot.getId().default].status;\n\n    if (status && fulfillmentText.length >= 1) {\n      Bot.replyText(fulfillmentText);\n    }\n    \n    talk_check(parameter);\n    \n    // console.log(responses[0].queryResult)\n    console.log(\"parameter\", parameter)\n    console.log(\"shared_props\", shared_props[Bot.getId().default].status, status);\n    console.log(\"Detected intent\", responses[0].queryResult.displayName);\n  };\n\n  return {\n    talk\n  };\n};\n"]}