{"version":3,"sources":["../../../src/Bot/DialogFlow/DialogFlow.js"],"names":["DialogFlow","Bot","message","props","event","projectId","sessionId","uuid","v4","sessionClient","dialogflow","SessionsClient","config","sessionPath","phrases","talk","silent","intent_status","msg","includes","toLowerCase","query","session","queryInput","text","languageCode","responses","detectIntent","fulfillmentText","queryResult","console","log","length","replyText"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;;;AAEO,MAAMA,kCAAaC,OAAO;AAC/B,QAAM,EAAEC,OAAF,KAAcD,IAAIE,KAAJ,CAAUC,KAA9B;AACA,QAAMC,YAAY,iBAAlB;AACA;AACA,QAAMC,YAAYC,eAAKC,EAAL,EAAlB;;AAEA;AACA,QAAMC,gBAAgB,IAAIC,qBAAWC,cAAf,CAA8BC,oBAA9B,CAAtB;AACA,QAAMC,cAAcJ,cAAcI,WAAd,CAA0BR,SAA1B,EAAqCC,SAArC,CAApB;;AAGA,QAAMQ,UAAU;AACdC,UAAM,CACN,OADM,EAEN,cAFM,CADQ;AAKdC,YAAQ,CACN,eADM,EAEN,iBAFM;AALM,GAAhB;;AAWA,MAAIC,gBAAgB,KAApB;;AAEA;AACA,QAAMF,OAAO,MAAMG,GAAN,IAAa;AACxB,QAAIJ,QAAQC,IAAR,CAAaI,QAAb,CAAsBD,IAAIE,WAAJ,EAAtB,CAAJ,EAA8CH,gBAAgB,IAAhB;AAC9C,UAAMI,QAAQ;AACZC,eAAST,WADG;AAEZU,kBAAY;AACVC,cAAM;AACJ;AACAA,gBAAMN,GAFF;AAGJ;AACAO,wBAAc;AAJV;AADI;AAFA,KAAd;AAWA,UAAMC,YAAY,MAAMjB,cAAckB,YAAd,CAA2BN,KAA3B,CAAxB;AACA,UAAM,EAAEO,eAAF,KAAsBF,UAAU,CAAV,EAAaG,WAAzC;AACAC,YAAQC,GAAR,CAAY,iBAAZ,EAA+BH,eAA/B;;AAEA,QAAIX,iBAAiBW,gBAAgBI,MAAhB,IAA0B,CAA/C,EAAkD;AAChD,YAAM/B,IAAIgC,SAAJ,CAAcL,eAAd,CAAN;AACD;AACD,QAAId,QAAQE,MAAR,CAAeG,QAAf,CAAwBD,IAAIE,WAAJ,EAAxB,CAAJ,EAAgDH,gBAAgB,KAAhB;AACjD,GArBD;;AAuBA,SAAO;AACLF;AADK,GAAP;AAGD,CAnDM","file":"DialogFlow.js","sourcesContent":["import dialogflow from \"dialogflow\";\nimport uuid from \"uuid\";\nimport config from \"../../Config/DialogFlow\";\n\nexport const DialogFlow = Bot => {\n  const { message } = Bot.props.event;\n  const projectId = \"newagent-nlaqvy\";\n  // A unique identifier for the given session\n  const sessionId = uuid.v4();\n\n  // Create a new session\n  const sessionClient = new dialogflow.SessionsClient(config);\n  const sessionPath = sessionClient.sessionPath(projectId, sessionId);\n\n  \n  const phrases = {\n    talk: [\n    'feppi',\n    'mulai bicara'\n    ],\n    silent: [\n      'feppi selesai',\n      'berhenti bicara'\n    ]\n  }\n  \n  let intent_status = false\n  \n  // Send request and log result\n  const talk = async msg => {\n    if (phrases.talk.includes(msg.toLowerCase())) intent_status = true\n    const query = {\n      session: sessionPath,\n      queryInput: {\n        text: {\n          // The query to send to the dialogflow agent\n          text: msg,\n          // The language used by the client (en-US/id)\n          languageCode: \"id\"\n        }\n      }\n    };\n    const responses = await sessionClient.detectIntent(query);\n    const { fulfillmentText } = responses[0].queryResult;\n    console.log(\"Detected intent\", fulfillmentText);\n    \n    if (intent_status && fulfillmentText.length >= 1) {\n      await Bot.replyText(fulfillmentText);\n    }\n    if (phrases.silent.includes(msg.toLowerCase())) intent_status = false\n  };\n\n  return {\n    talk\n  };\n};\n"]}