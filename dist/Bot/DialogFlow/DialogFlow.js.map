{"version":3,"sources":["../../../src/Bot/DialogFlow/DialogFlow.js"],"names":["DialogFlow","constructor","Bot","get_parameter","bind","get_query","chat_switch","chat","agent","default_agent","projectId","config","sessionId","uuid","v4","sessionClient","dialogflow","SessionsClient","sessionPath","temp_chat_switch","propsId","getId","default","responses","fields","queryResult","parameters","displayName","intent","allRequiredParamsPresent","msg","query","session","queryInput","text","languageCode","parameter","chat_switch_callback","default_callback","Object","keys","includes","shared_props","stringValue","Promise","resolve","reject","detectIntent","fulfillmentText","status","undefined","length","console","log","err"],"mappings":"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","file":"DialogFlow.js","sourcesContent":["import dialogflow from \"dialogflow\";\nimport uuid from \"uuid\";\nimport { default_agent } from \"../../Config/DialogFlow\";\nimport { shared_props } from \"../../Bot\";\n\nexport class DialogFlow {\n  constructor(Bot) {\n    this.Bot = Bot;\n    this.get_parameter = this.get_parameter.bind(this);\n    this.get_query = this.get_query.bind(this);\n    this.chat_switch = this.chat_switch.bind(this);\n    this.chat = this.chat.bind(this);\n\n    // selected agent\n    this.agent = default_agent;\n    this.projectId = this.agent.projectId;\n    this.config = this.agent.config;\n\n    // A unique identifier for the given session\n    this.sessionId = uuid.v4();\n\n    // Create a new session\n    this.sessionClient = new dialogflow.SessionsClient(this.config);\n    this.sessionPath = this.sessionClient.sessionPath(\n      this.projectId,\n      this.sessionId\n    );\n\n    this.temp_chat_switch = true;\n    \n    this.propsId = this.Bot.getId().default\n  }\n  get_parameter(responses) {\n    const { fields } = responses[0].queryResult.parameters;\n    const { displayName } = responses[0].queryResult.intent;\n    const { allRequiredParamsPresent } = responses[0].queryResult;\n    return { displayName, fields, allRequiredParamsPresent };\n  }\n\n  get_query(msg) {\n    const query = {\n      session: this.sessionPath,\n      queryInput: {\n        text: {\n          // The query to send to the dialogflow agent\n          text: msg,\n          // The language used by the client (en-US/id)\n          languageCode: \"id\"\n        }\n      }\n    };\n    return query;\n  }\n\n  chat_switch(parameter, chat_switch_callback, default_callback) {\n    const { fields, displayName } = parameter;\n    if (displayName === \"chat.talk\" || displayName === \"chat.silent\") {\n      if (Object.keys(fields).includes(\"chat\")) {\n        shared_props[this.propsId][\"status\"] = fields.chat.stringValue === \"true\";\n        return chat_switch_callback();\n      }\n    }\n    return default_callback();\n  }\n\n  // Send request and log result\n  async chat(msg) {\n    return new Promise(async (resolve, reject) => {\n      try {      \n        const query = this.get_query(msg);\n        const responses = await this.sessionClient.detectIntent(query);\n        const parameter = this.get_parameter(responses);\n\n        const { queryResult } = responses[0];\n        const { fulfillmentText } = queryResult;\n\n        \n        \n        const status =\n          shared_props[this.propsId].status === undefined\n            ? false\n            : shared_props[this.propsId].status;\n\n        const chat_switch_callback = () => {\n            return resolve({ fulfillmentText, parameter });\n        }; \n        \n        const default_callback = () => {\n          if(status) {\n              return resolve({ fulfillmentText, parameter });\n          }\n        };\n      \n        if (fulfillmentText.length >= 1) {\n          this.chat_switch(parameter, chat_switch_callback, default_callback);\n        }\n\n        \n\n        console.log(\"parameter\", parameter);\n        console.log(\n          \"shared_props\",\n          shared_props[this.propsId].status,\n          status\n        );\n        console.log(\"Detected intent\", responses[0].queryResult.displayName);\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n}\n"]}