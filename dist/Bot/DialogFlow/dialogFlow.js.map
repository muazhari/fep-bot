{"version":3,"sources":["../../../src/Bot/DialogFlow/dialogFlow.js"],"names":["dialogFlow","Bot","propsId","getId","origin","initDialogFlowProps","agent","default_agent","projectId","config","sessionId","uuid","v4","sessionClient","dialogflow","SessionsClient","sessionPath","shared_props","undefined","isTalking","getParameter","responses","fields","queryResult","parameters","displayName","intent","allRequiredParamsPresent","getQuery","msg","query","session","queryInput","text","languageCode","chatGate","parameter","chatCallback","Object","keys","includes","JSON","parse","chat","stringValue","listen","Promise","resolve","reject","message","props","event","detectIntent","then","response","fulfillmentText","cleanResponses","console","log","stringify","err"],"mappings":"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","file":"dialogFlow.js","sourcesContent":["import dialogflow from \"dialogflow\";\nimport uuid from \"uuid\";\nimport { default_agent } from \"../../Config/DialogFlow\";\nimport { shared_props } from \"../../Bot\";\nimport { handlerDialogFlow } from \"./internal\";\n\nexport const dialogFlow = Bot => {\n  const propsId = Bot.getId().origin;\n  initDialogFlowProps();\n\n  // selected agent\n  const agent = default_agent;\n  const projectId = agent.projectId;\n  const config = agent.config;\n\n  // A unique identifier for the given session\n  const sessionId = uuid.v4();\n\n  // Create a new session\n  const sessionClient = new dialogflow.SessionsClient(config);\n  const sessionPath = sessionClient.sessionPath(projectId, sessionId);\n\n  // handler = handlerDialogFlow(Bot);\n\n  const initDialogFlowProps = () => {\n    if (shared_props[propsId][\"dialogFlow\"] === undefined) {\n      shared_props[propsId][\"dialogFlow\"] = { isTalking: false };\n    }\n  };\n\n  const getParameter = responses => {\n    const { fields } = responses[0].queryResult.parameters;\n    const { displayName } = responses[0].queryResult.intent;\n    const { allRequiredParamsPresent } = responses[0].queryResult;\n    return { displayName, fields, allRequiredParamsPresent };\n  };\n\n  const getQuery = msg => {\n    const query = {\n      session: sessionPath,\n      queryInput: {\n        text: {\n          // The query to send to the dialogflow agent\n          text: msg,\n          // The language used by the client (en-US/id)\n          languageCode: \"id\"\n        }\n      }\n    };\n    return query;\n  };\n\n  const chatGate = (parameter, chatCallback) => {\n    const { fields, displayName } = parameter;\n    if (\n      shared_props[propsId].dialogFlow.isTalking ||\n      displayName === \"chat.talk\"\n    ) {\n      if (Object.keys(fields).includes(\"chat\")) {\n        shared_props[propsId].dialogFlow.isTalking = JSON.parse(\n          fields.chat.stringValue\n        );\n      }\n      return chatCallback();\n    }\n  };\n\n  // Send request and log result\n  const listen = () => {\n    return new Promise((resolve, reject) => {\n      try {\n        const { message } = Bot.props.event;\n        const query = getQuery(message.text);\n        sessionClient.detectIntent(query).then(response => {\n          const parameter = getParameter(response);\n\n          const { queryResult } = response[0];\n          const { fulfillmentText } = queryResult;\n\n          const chatCallback = () => {\n            const cleanResponses = { fulfillmentText, parameter };\n            handlerDialogFlow(Bot, response);\n            return resolve();\n          };\n\n          // if (fulfillmentText.length >= 1) {\n          chatGate(parameter, chatCallback);\n          // }\n\n          console.log(\n            \"isTalking\",\n            shared_props[propsId].dialogFlow.isTalking\n          );\n          console.log(\"parameter\", JSON.stringify(parameter));\n          console.log(\"Detected intent\", response[0].queryResult.displayName);\n          console.log(JSON.stringify(response));\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  };\n\n  return {\n    listen\n  };\n};\n"]}