{"version":3,"sources":["../../../src/Bot/DialogFlow/dialogFlow.js"],"names":["dialogFlow","constructor","Bot","propsId","getId","origin","initDialogFlowProps","agent","default_agent","projectId","config","sessionId","uuid","v4","sessionClient","dialogflow","SessionsClient","sessionPath","shared_props","undefined","isTalking","getParameter","responses","fields","queryResult","parameters","displayName","intent","allRequiredParamsPresent","getQuery","msg","query","session","queryInput","text","languageCode","chatGate","parameter","chatCallback","Object","keys","includes","JSON","parse","chat","stringValue","listen","Promise","resolve","reject","message","props","event","detectIntent","then","fulfillmentText","cleanResponses","handlerDialogFlow","console","log","stringify","err"],"mappings":"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","file":"dialogFlow.js","sourcesContent":["import dialogflow from \"dialogflow\";\nimport uuid from \"uuid\";\nimport { default_agent } from \"../../Config/DialogFlow\";\nimport { SharedProps } from \"../../Bot\";\nimport { handlerDialogFlow } from \"./internal\";\n\nexport class dialogFlow {\n  constructor(Bot) {\n    this.Bot = Bot;\n    this.propsId = Bot.getId().origin;\n    this.initDialogFlowProps();\n\n    // selected agent\n    this.agent = default_agent;\n    this.projectId = this.agent.projectId;\n    this.config = this.agent.config;\n\n    // A unique identifier for the given session\n    this.sessionId = uuid.v4();\n\n    // Create a new session\n    this.sessionClient = new dialogflow.SessionsClient(this.config);\n    this.sessionPath = this.sessionClient.sessionPath(\n      this.projectId,\n      this.sessionId\n    );\n\n    // handler = handlerDialogFlow(Bot);\n  }\n\n  initDialogFlowProps() {\n    if (shared_props[this.propsId][\"dialogFlow\"] === undefined) {\n      shared_props[this.propsId][\"dialogFlow\"] = { isTalking: false };\n    }\n  }\n\n  getParameter(responses) {\n    const { fields } = responses[0].queryResult.parameters;\n    const { displayName } = responses[0].queryResult.intent;\n    const { allRequiredParamsPresent } = responses[0].queryResult;\n    return { displayName, fields, allRequiredParamsPresent };\n  }\n\n  getQuery(msg) {\n    const query = {\n      session: this.sessionPath,\n      queryInput: {\n        text: {\n          // The query to send to the dialogflow agent\n          text: msg,\n          // The language used by the client (en-US/id)\n          languageCode: \"id\"\n        }\n      }\n    };\n    return query;\n  }\n\n  chatGate(parameter, chatCallback) {\n    const { fields, displayName } = parameter;\n    if (\n      shared_props[this.propsId].dialogFlow.isTalking ||\n      displayName === \"chat.talk\" || displayName === \"chat.silent\"\n    ) {\n      if (Object.keys(fields).includes(\"chat\")) {\n        shared_props[this.propsId].dialogFlow.isTalking = JSON.parse(\n          fields.chat.stringValue\n        );\n      }\n      return chatCallback();\n    }\n  }\n\n  // Send request and log result\n  listen() {\n    return new Promise((resolve, reject) => {\n      try {\n        const { message } = this.Bot.props.event;\n        const query = this.getQuery(message.text);\n        this.sessionClient.detectIntent(query).then(responses => {\n          const parameter = this.getParameter(responses);\n\n          const { queryResult } = responses[0];\n          const { fulfillmentText } = queryResult;\n\n          const chatCallback = () => {\n            const cleanResponses = { fulfillmentText, parameter };\n            new handlerDialogFlow(this.Bot, cleanResponses);\n            return resolve();\n          };\n\n          // if (fulfillmentText.length >= 1) {\n          this.chatGate(parameter, chatCallback);\n          // }\n\n          console.log(\n            \"isTalking\",\n            shared_props[this.propsId].dialogFlow.isTalking\n          );\n          console.log(\"parameter\", JSON.stringify(parameter));\n          console.log(\"Detected intent\", responses[0].queryResult.displayName);\n          console.log(JSON.stringify(responses));\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n}\n"]}