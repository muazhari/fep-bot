{"version":3,"sources":["../../../src/Bot/DialogFlow/dialogFlow.js"],"names":["dialogFlow","constructor","Bot","propsId","getId","origin","initDialogFlowProps","agent","default_agent","projectId","config","sessionId","uuid","v4","sessionClient","dialogflow","SessionsClient","sessionPath","SharedProps","store","undefined","isTalking","getParameter","responses","fields","queryResult","parameters","displayName","intent","allRequiredParamsPresent","getQuery","msg","query","session","queryInput","text","languageCode","chatGate","parameter","chatCallback","Object","keys","includes","JSON","parse","chat","stringValue","listen","Promise","resolve","reject","message","props","event","detectIntent","then","fulfillmentText","cleanResponses","handlerDialogFlow","console","log","stringify","err"],"mappings":"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","file":"dialogFlow.js","sourcesContent":["import dialogflow from \"dialogflow\";\nimport uuid from \"uuid\";\nimport {default_agent} from \"../../Config/DialogFlow\";\nimport {SharedProps} from \"../../Bot\";\nimport {handlerDialogFlow} from \"./internal\";\n\nexport class dialogFlow {\n  constructor(Bot) {\n    this.Bot = Bot;\n    this.propsId = Bot.getId().origin;\n    this.initDialogFlowProps();\n\n    // selected agent\n    this.agent = default_agent;\n    this.projectId = this.agent.projectId;\n    this.config = this.agent.config;\n\n    // A unique identifier for the given session\n    this.sessionId = uuid.v4();\n\n    // Create a new session\n    this.sessionClient = new dialogflow.SessionsClient(this.config);\n    this.sessionPath = this.sessionClient.sessionPath(this.projectId, this.sessionId);\n\n    // handler = handlerDialogFlow(Bot);\n  }\n\n  initDialogFlowProps() {\n    if (SharedProps.store[this.propsId][\"dialogFlow\"] === undefined) {\n      SharedProps.store[this.propsId][\"dialogFlow\"] = {\n        isTalking: false\n      };\n    }\n  }\n\n  getParameter(responses) {\n    const {fields} = responses[0].queryResult.parameters;\n    const {displayName} = responses[0].queryResult.intent;\n    const {allRequiredParamsPresent} = responses[0].queryResult;\n    return {displayName, fields, allRequiredParamsPresent};\n  }\n\n  getQuery(msg) {\n    const query = {\n      session: this.sessionPath,\n      queryInput: {\n        text: {\n          // The query to send to the dialogflow agent\n          text: msg,\n          // The language used by the client (en-US/id)\n          languageCode: \"id\"\n        }\n      }\n    };\n    return query;\n  }\n\n  chatGate(parameter, chatCallback) {\n    const {fields, displayName} = parameter;\n    if (SharedProps.store[this.propsId].dialogFlow.isTalking || displayName === \"chat.talk\" || displayName === \"chat.silent\") {\n      if (Object.keys(fields).includes(\"chat\")) {\n        SharedProps.store[this.propsId].dialogFlow.isTalking = JSON.parse(fields.chat.stringValue);\n      }\n      return chatCallback();\n    }\n  }\n\n  // Send request and log result\n  listen() {\n    return new Promise((resolve, reject) => {\n      try {\n        const {message} = this.Bot.props.event;\n        const query = this.getQuery(message.text);\n        this.sessionClient.detectIntent(query).then(responses => {\n          const parameter = this.getParameter(responses);\n\n          const {queryResult} = responses[0];\n          const {fulfillmentText} = queryResult;\n\n          const chatCallback = () => {\n            const cleanResponses = {\n              fulfillmentText,\n              parameter\n            };\n            new handlerDialogFlow(this.Bot, cleanResponses);\n            return resolve();\n          };\n\n          // if (fulfillmentText.length >= 1) {\n          this.chatGate(parameter, chatCallback);\n          // }\n\n          console.log(\"[DialogFlow] isTalking\", SharedProps.store[this.propsId].dialogFlow.isTalking);\n          console.log(\"[DialogFlow] Parameter\", JSON.stringify(parameter));\n          console.log(\"[DialogFlow] Detected intent\", responses[0].queryResult.displayName);\n          console.log(\"[DialogFlow] responses: \", JSON.stringify(responses));\n        });\n      } catch (err) {\n        reject(err);\n      }\n    });\n  }\n}\n"]}