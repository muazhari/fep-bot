{"version":3,"sources":["../../../src/Bot/Features/Twibbon.js"],"names":["objectsHaveSameKeys","objects","allKeys","reduce","keys","object","concat","Object","union","Set","every","size","length","Twibbon","Bot","user","userId","origin","originId","getId","manual_transform","twibbon_overlay","filename","transformation","crop","width","height","format","public_id","overlay","flags","aspect_ratio","twibbon_list","twibbon_cs","category","name","url","transform","auto","gravity","y","Math","floor","x","manual","twibbon_tfi","twibbon_binus1","twibbon_binus2","twibbon_binus3","ready","args","data","SharedProps","store","status","source","id","displayList","replyText","command_prefix","selected","map","twibbonId","filter","twibbonColumns","thumbnailImageUrl","imageBackgroundColor","text","actions","type","label","JSON","stringify","twibbon","sendMessage","altText","template","columns","imageAspectRatio","imageSize","listenPostback","getProfile","then","profile","messages","displayName","push","getTransformedFileUrl","twibbonSetting","publicId","result","cloudinary","generate","Promise","resolve","reject","CloudinaryUtils","upload","twibbonBackgroundMeta","performTransformations","twibbonOriginalName","resultOriginalUrl","twibonPreviewName","resultPreviewUrl","all","fileMeta","twibbonOriginalUrl","secure_url","twibbonPreviewUrl","fs","unlinkSync","originalContentPath","previewPath","make","props","event","message","originalContentUrl","previewImageUrl","listenImage","getContent","userSwitch","userInSameCommunal","twibbonIdChosen","undefined"],"mappings":"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","file":"Twibbon.js","sourcesContent":["import { command_prefix, batch_list, baseURL, SharedProps } from \"../../Bot\";\nimport FEPStoreCRUD from \"../../Bot/Helper/FEPStoreCRUD\";\nimport CloudinaryUtils from \"../../Bot/Helper/CloudinaryUtils\";\nimport cloudinary from \"cloudinary\";\nimport fs from \"fs-extra\";\nimport request from \"request\";\nimport cp from \"child_process\";\nimport path from \"path\";\n\nconst objectsHaveSameKeys = (...objects) => {\n  const allKeys = objects.reduce(\n    (keys, object) => keys.concat(Object.keys(object)),\n    []\n  );\n  const union = new Set(allKeys);\n  return objects.every(object => union.size === Object.keys(object).length);\n};\n\nexport const Twibbon = Bot => {\n  const { user: userId, origin: originId } = Bot.getId();\n\n  const manual_transform = (twibbon_overlay, filename, size) => {\n    return {\n      transformation: [\n        {\n          crop: \"fit\",\n          width: size,\n          height: size,\n          format: \"jpg\",\n          public_id: `${filename}-twibbon`\n        },\n        {\n          overlay: twibbon_overlay,\n          flags: \"relative\",\n          width: size,\n          height: size,\n          aspect_ratio: \"1:1\"\n        }\n      ]\n    };\n  };\n\n  const twibbon_list = {\n    twibbon_cs: {\n      category: \"socs\",\n      name: \"Computer Science\",\n      url:\n        \"https://res.cloudinary.com/fep-bot/image/upload/v1564639746/twibbon_cs.png\",\n      transform: (filename, size) => {\n        return {\n          auto: {\n            transformation: [\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                format: \"jpg\",\n                aspect_ratio: \"1:1\",\n                public_id: `${filename}-twibbon`\n              },\n              {\n                gravity: \"auto\",\n                crop: \"fill_pad\",\n                width: size,\n                height: size,\n                y: Math.floor(-size * 0.2),\n                x: Math.floor(size * 0.045)\n              },\n              {\n                overlay: \"twibbon_cs.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          },\n          manual: {\n            transformation: [\n              {\n                crop: \"fit\",\n                format: \"jpg\",\n                width: size,\n                height: size,\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_cs.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          }\n        };\n      }\n    },\n\n    twibbon_tfi: {\n      category: \"tfi\",\n      name: \"Teach For Indonesia\",\n      url:\n        \"https://res.cloudinary.com/fep-bot/image/upload/v1565361689/twibbon_tfi.png\",\n      transform: (filename, size) => {\n        return {\n          auto: {\n            transformation: [\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size + Math.floor(-size * 0.045),\n                height: size + Math.floor(size * 0.2),\n                x: Math.floor(size * 0.045),\n                y: Math.floor(-size * 0.2),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                width: size,\n                height: size\n              },\n              {\n                overlay: \"twibbon_tfi.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          },\n          manual: {\n            transformation: [\n              {\n                crop: \"fit\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size,\n                height: size,\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_tfi.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          }\n        };\n      }\n    },\n\n    twibbon_binus1: {\n      category: \"binus\",\n      name: \"Binus 1\",\n      url:\n        \"https://res.cloudinary.com/fep-bot/image/upload/v1565372081/twibbon_binus1.png\",\n      transform: (filename, size) => {\n        return {\n          auto: {\n            transformation: [\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.2),\n                height: size - Math.floor(size * 0.2),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus1.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          },\n          manual: {\n            transformation: [\n              {\n                crop: \"fit\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.2125),\n                height: size - Math.floor(size * 0.2),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus1.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          }\n        };\n      }\n    },\n\n    twibbon_binus2: {\n      category: \"binus\",\n      name: \"Binus 2\",\n      url:\n        \"https://res.cloudinary.com/fep-bot/image/upload/v1565372079/twibbon_binus2.png\",\n      transform: (filename, size) => {\n        return {\n          auto: {\n            transformation: [\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.225),\n                height: size - Math.floor(size * 0.225),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus2.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          },\n          manual: {\n            transformation: [\n              {\n                crop: \"fit\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.225),\n                height: size - Math.floor(size * 0.225),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus2.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          }\n        };\n      }\n    },\n\n    twibbon_binus3: {\n      category: \"binus\",\n      name: \"Binus 3\",\n      url:\n        \"https://res.cloudinary.com/fep-bot/image/upload/v1565372078/twibbon_binus3.png\",\n      transform: (filename, size) => {\n        return {\n          auto: {\n            transformation: [\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.225),\n                height: size - Math.floor(size * 0.225),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus3.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          },\n          manual: {\n            transformation: [\n              {\n                crop: \"fit\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.225),\n                height: size - Math.floor(size * 0.225),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus3.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          }\n        };\n      }\n    }\n  };\n\n  const ready = args => {\n    if (args.length <= 1) {\n      const data = {\n        category: args[0]\n      };\n\n      // ready-up switch\n      SharedProps.store[userId][\"twibbon\"] = {\n        status: true,\n        source: {\n          id: originId\n        }\n      };\n      displayList(data.category);\n    } else {\n      Bot.replyText(`${command_prefix}twibbon <type>`);\n    }\n  };\n\n  const displayList = category => {\n    let selected = Object.keys(twibbon_list)\n      .map(twibbonId => twibbonId)\n      .filter(twibbonId => typeof twibbonId === \"string\");\n\n    if (category) {\n      selected = Object.keys(twibbon_list).filter(\n        twibbonId => twibbon_list[twibbonId].category === category\n      );\n      if (selected.length === 0) {\n        return Bot.replyText(\n          `Tidak ada kategori, lihat di ${command_prefix}twibbon`\n        );\n      }\n    }\n\n    const twibbonColumns = selected.map(id => {\n      const { url, name } = twibbon_list[id];\n      return {\n        thumbnailImageUrl: url,\n        imageBackgroundColor: \"#FFFFFF\",\n        text: name,\n        actions: [\n          {\n            type: \"postback\",\n            label: \"Auto-AI Mode\",\n            data: JSON.stringify({ twibbon: { id: id, type: \"auto\" } })\n          },\n          {\n            type: \"postback\",\n            label: \"Manual Mode\",\n            data: JSON.stringify({ twibbon: { id: id, type: \"manual\" } })\n          }\n        ]\n      };\n    });\n\n    Bot.sendMessage({\n      type: \"template\",\n      altText: \"Twibbon list\",\n      template: {\n        type: \"carousel\",\n        columns: twibbonColumns,\n        imageAspectRatio: \"square\",\n        imageSize: \"cover\"\n      }\n    });\n  };\n\n  const listenPostback = data => {\n    if (data.twibbon) {\n      const { id, type } = data.twibbon;\n\n      // ready-up switch\n      SharedProps.store[userId][\"twibbon\"] = {\n        id: id,\n        type: type,\n        status: true,\n        source: {\n          id: originId\n        }\n      };\n\n      Bot.getProfile().then(profile => {\n        const messages = [\n          `Hai ${profile.displayName}, masukan gambar mu disini~`\n        ];\n        if (type === \"manual\") {\n          messages.push(\n            `Pastikan 1:1 ya fotonya~\\n\\nTips: gunakan in-app camera line disamping kolom chat dan set ratio ke 1:1`\n          );\n        }\n        Bot.replyText(messages);\n      });\n    }\n  };\n\n  const getTransformedFileUrl = (twibbonSetting, publicId, filename, size) => {\n    const result = cloudinary.url(\n      publicId,\n      twibbon_list[twibbonSetting.id].transform(filename, size)[\n        twibbonSetting.type\n      ]\n    );\n    return result;\n  };\n\n  const generate = data => {\n    return new Promise((resolve, reject) => {\n      CloudinaryUtils.upload(data.url, data.filename).then(\n        twibbonBackgroundMeta => {\n          performTransformations(twibbonBackgroundMeta);\n        }\n      );\n\n      const performTransformations = twibbonBackgroundMeta => {\n        const twibbonOriginalName = `${data.filename}-twibbon`;\n        const resultOriginalUrl = getTransformedFileUrl(\n          data.twibbonSetting,\n          twibbonBackgroundMeta.public_id,\n          twibbonOriginalName,\n          1040\n        );\n\n        const twibonPreviewName = `${data.filename}-twibbon-preview`;\n        const resultPreviewUrl = getTransformedFileUrl(\n          data.twibbonSetting,\n          twibbonBackgroundMeta.public_id,\n          twibonPreviewName,\n          240\n        );\n\n        Promise.all([\n          CloudinaryUtils.upload(resultOriginalUrl, twibbonOriginalName),\n          CloudinaryUtils.upload(resultPreviewUrl, twibonPreviewName)\n        ]).then(fileMeta => {\n          resolve({\n            twibbonOriginalUrl: fileMeta[0].secure_url,\n            twibbonPreviewUrl: fileMeta[1].secure_url\n          });\n\n          fs.unlinkSync(data.originalContentPath);\n          fs.unlinkSync(data.previewPath);\n        });\n      };\n    });\n  };\n\n  const make = args => {\n    const data = {\n      url: args[0],\n      originalContentPath: args[1],\n      previewPath: args[2],\n      twibbonSetting: args[3],\n      filename: Bot.props.event.message.id\n    };\n\n    generate(data).then(({ twibbonOriginalUrl, twibbonPreviewUrl }) => {\n      Bot.sendMessage({\n        type: \"image\",\n        originalContentUrl: twibbonOriginalUrl,\n        previewImageUrl: twibbonPreviewUrl\n      });\n    });\n\n    //switch back\n    SharedProps.store[userId].twibbon.status = false;\n  };\n\n  const listenImage = getContent => {\n    if (SharedProps.store[userId].twibbon) {\n      const userSwitch = SharedProps.store[userId].twibbon.status;\n\n      const userInSameCommunal =\n        SharedProps.store[userId].twibbon.source.id === originId;\n\n      const twibbonIdChosen =\n        SharedProps.store[userId].twibbon.id !== undefined;\n\n      if (userSwitch && userInSameCommunal && twibbonIdChosen) {\n        const twibbonSetting = {\n          id: SharedProps.store[userId].twibbon.id,\n          type: SharedProps.store[userId].twibbon.type\n        };\n\n        getContent().then(\n          ({\n            originalContentPath,\n            previewPath,\n            originalContentUrl,\n            previewImageUrl\n          }) => {\n            make([\n              originalContentUrl,\n              originalContentPath,\n              previewPath,\n              twibbonSetting\n            ]);\n          }\n        );\n      }\n    }\n  };\n\n  return { ready, listenImage, listenPostback };\n};\n"]}