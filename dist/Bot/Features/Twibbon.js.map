{"version":3,"sources":["../../../src/Bot/Features/Twibbon.js"],"names":["download","uri","path","Promise","resolve","reject","request","head","err","res","body","console","log","headers","pipe","fs","createWriteStream","on","Twibbon","Bot","uploads","twibbon_uploads","ready","shared_props","getId","user","replyText","getResult","public_id","filename","size","result","cloudinary","url","transformation","gravity","aspect_ratio","crop","format","width","height","overlay","flags","imgUpload","uploader","upload","then","image","catch","warn","waitForAllUploads","id","queue","callback","ids","Object","keys","length","join","waitForAllUploadsTwibbon","make","args","data","performTransformations","twibbon_ori_name","result_url","twibbon_bg","twibbon_preview_name","result_preview_url","performResolve","twibbonOriginalUrl","original","secure_url","twibbonPreviewUrl","preview","command_prefix"],"mappings":"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","file":"Twibbon.js","sourcesContent":["import { command_prefix, batch_list, baseURL, shared_props } from \"../../Bot\";\nimport FEPStoreCRUD from \"../../Bot/Helper/FEPStoreCRUD\";\nimport cloudinary from \"cloudinary\";\nimport convert from \"xml-js\";\nimport fs from \"fs\";\nimport request from \"request\";\nimport cp from \"child_process\";\nimport path from \"path\";\n\nconst download = (uri, path) => {\n  return new Promise((resolve, reject) => {\n    request.head(uri, (err, res, body) => {\n      console.log(\"content-type:\", res.headers[\"content-type\"]);\n      console.log(\"content-length:\", res.headers[\"content-length\"]);\n\n      request(uri)\n        .pipe(fs.createWriteStream(path))\n        .on(\"close\", resolve(path))\n        .on(\"error\", reject);\n    });\n  });\n};\n\nexport const Twibbon = Bot => {\n  const uploads = {};\n  const twibbon_uploads = {};\n  \n  const ready = () => {\n    // ready-up switch\n    shared_props[Bot.getId().user]['twibbon'] = true\n    Bot.replyText('Masukan gambar mu~')\n    \n  }\n\n  const getResult = (public_id, filename, size) => {\n    const result = cloudinary.url(public_id, {\n      transformation: [\n        {\n          gravity: \"auto\",\n          aspect_ratio: \"1:1\",\n          crop: \"fill\",\n          format: \"jpg\",\n          width: size,\n          height: size,\n          public_id: `${filename}-twibbon`\n        },\n        {\n          overlay: \"twibbon_cs.png\",\n          flags: \"relative\",\n          width: size,\n          height: size,\n          aspect_ratio: \"1:1\"\n        }\n      ]\n    });\n\n    return result;\n  };\n\n  const imgUpload = (url, filename) => {\n    return new Promise((resolve, reject) => {\n      cloudinary.uploader\n        .upload(url, { public_id: filename })\n        .then(image => {\n          console.log(\"** File Upload (Promise)\");\n          console.log(\"* \" + image.public_id);\n          console.log(\"* \" + image.url);\n          resolve(image);\n        })\n        .catch(err => {\n          console.log(\"** File Upload (Promise)\");\n          if (err) {\n            console.warn(err);\n            reject(err);\n          }\n        });\n    });\n  };\n\n  const waitForAllUploads = (id, image, queue, callback) => {\n    uploads[id] = image;\n    const ids = Object.keys(uploads);\n    if (ids.length === queue) {\n      console.log(\n        \"**  uploaded all files (\" + ids.join(\",\") + \") to cloudinary\"\n      );\n      callback();\n    }\n  };\n\n  const waitForAllUploadsTwibbon = (id, image, queue, callback) => {\n    twibbon_uploads[id] = image;\n    const ids = Object.keys(twibbon_uploads);\n    if (ids.length === queue) {\n      console.log(\n        \"**  uploaded all twibbon files (\" + ids.join(\",\") + \") to cloudinary\"\n      );\n      callback();\n    }\n  };\n\n  const make = args => {\n    if (args.length === 3) {\n      const data = {\n        url: args[0],\n        path: args[1],\n        filename: args[2]\n      };\n\n      console.log(data);\n\n      return new Promise(async (resolve, reject) => {\n        imgUpload(data.url, data.filename).then(image => {\n          waitForAllUploads(\"twibbon_bg\", image, 1, performTransformations);\n        });\n\n        const twibbon_ori_name = `${data.filename}-twibbon`;\n        const performTransformations = () => {\n          const result_url = getResult(\n            uploads.twibbon_bg.public_id,\n            twibbon_ori_name,\n            1040\n          );\n\n          const twibbon_preview_name = `${data.filename}-twibbon-preview`;\n          const result_preview_url = getResult(\n            uploads.twibbon_bg.public_id,\n            twibbon_preview_name,\n            240\n          );\n\n          imgUpload(result_url, twibbon_ori_name).then(image => {\n            waitForAllUploadsTwibbon(\"original\", image, 2, performResolve);\n          });\n\n          imgUpload(result_preview_url, twibbon_preview_name).then(image => {\n            waitForAllUploadsTwibbon(\"preview\", image, 2, performResolve);\n          });\n\n          const performResolve = () => {\n            resolve({\n              twibbonOriginalUrl: `${twibbon_uploads.original.secure_url}`,\n              twibbonPreviewUrl: `${twibbon_uploads.preview.secure_url}`\n            })\n          };\n        };\n      });\n    } else {\n      Bot.replyText(`${command_prefix}twibbon <image>`);\n    }\n  };\n\n  return {\n    make,\n    ready,\n  };\n};\n"]}