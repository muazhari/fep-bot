{"version":3,"sources":["../../../src/Bot/Features/Twibbon.js"],"names":["objectsHaveSameKeys","objects","allKeys","reduce","keys","object","concat","Object","union","Set","every","size","length","Twibbon","Bot","uploads","manual_transform","twibbon_overlay","filename","transformation","crop","width","height","format","public_id","overlay","flags","aspect_ratio","twibbon_list","twibbon_cs","category","name","url","transform","auto","gravity","y","Math","floor","x","manual","twibbon_tfi","twibbon_binus1","twibbon_binus2","twibbon_binus3","ready","args","data","shared_props","getId","user","status","source","id","origin","display_list","replyText","command_prefix","listen","twibbon","type","getProfile","then","res","messages","displayName","push","selected","map","twibbon_id","pure_selected","filter","item","twibbon_contents","thumbnailImageUrl","imageBackgroundColor","text","actions","label","sendMessage","altText","template","columns","imageAspectRatio","imageSize","getResult","twibbon_setting","result","cloudinary","imgUpload","Promise","resolve","reject","uploader","upload","image","console","log","catch","err","warn","waitForAllUploads","queue","imageObject","callback","ids","join","generate","twibbon_bg","performTransformations","twibbon_ori_name","result_url","twibbonSetting","raw","twibbon_preview_name","result_preview_url","original","performResolve","preview","twibbonOriginalUrl","secure_url","twibbonPreviewUrl","fs","unlinkSync","originalPath","previewPath","make","props","event","message","originalContentUrl","previewImageUrl","insert","getContent","userId","originId","userSwitch","userInSameCommunal","twibbonIdChosen","undefined"],"mappings":"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","file":"Twibbon.js","sourcesContent":["import { command_prefix, batch_list, baseURL, shared_props } from \"../../Bot\";\nimport FEPStoreCRUD from \"../../Bot/Helper/FEPStoreCRUD\";\nimport cloudinary from \"cloudinary\";\nimport fs from \"fs-extra\";\nimport request from \"request\";\nimport cp from \"child_process\";\nimport path from \"path\";\n\nconst objectsHaveSameKeys = (...objects) => {\n  const allKeys = objects.reduce(\n    (keys, object) => keys.concat(Object.keys(object)),\n    []\n  );\n  const union = new Set(allKeys);\n  return objects.every(object => union.size === Object.keys(object).length);\n};\n\nexport const Twibbon = Bot => {\n  const uploads = {};\n\n  const manual_transform = (twibbon_overlay, filename, size) => {\n    return {\n      transformation: [\n        {\n          crop: \"fit\",\n          width: size,\n          height: size,\n          format: \"jpg\",\n          public_id: `${filename}-twibbon`\n        },\n        {\n          overlay: twibbon_overlay,\n          flags: \"relative\",\n          width: size,\n          height: size,\n          aspect_ratio: \"1:1\"\n        }\n      ]\n    };\n  };\n\n  const twibbon_list = {\n    twibbon_cs: {\n      category: \"socs\",\n      name: \"Computer Science\",\n      url:\n        \"https://res.cloudinary.com/fep-bot/image/upload/v1564639746/twibbon_cs.png\",\n      transform: (filename, size) => {\n        return {\n          auto: {\n            transformation: [\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                format: \"jpg\",\n                aspect_ratio: \"1:1\",\n                public_id: `${filename}-twibbon`\n              },\n              {\n                gravity: \"auto\",\n                crop: \"fill_pad\",\n                width: size,\n                height: size,\n                y: Math.floor(-size * 0.2),\n                x: Math.floor(size * 0.045)\n              },\n              {\n                overlay: \"twibbon_cs.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          },\n          manual: {\n            transformation: [\n              {\n                crop: \"fit\",\n                format: \"jpg\",\n                width: size,\n                height: size,\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_cs.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          }\n        };\n      }\n    },\n\n    twibbon_tfi: {\n      category: \"tfi\",\n      name: \"Teach For Indonesia\",\n      url:\n        \"https://res.cloudinary.com/fep-bot/image/upload/v1565361689/twibbon_tfi.png\",\n      transform: (filename, size) => {\n        return {\n          auto: {\n            transformation: [\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size + Math.floor(-size * 0.045),\n                height: size + Math.floor(size * 0.2),\n                x: Math.floor(size * 0.045),\n                y: Math.floor(-size * 0.2),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                width: size,\n                height: size\n              },\n              {\n                overlay: \"twibbon_tfi.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          },\n          manual: {\n            transformation: [\n              {\n                crop: \"fit\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size,\n                height: size,\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_tfi.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          }\n        };\n      }\n    },\n\n    twibbon_binus1: {\n      category: \"binus\",\n      name: \"Binus 1\",\n      url:\n        \"https://res.cloudinary.com/fep-bot/image/upload/v1565372081/twibbon_binus1.png\",\n      transform: (filename, size) => {\n        return {\n          auto: {\n            transformation: [\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.2),\n                height: size - Math.floor(size * 0.2),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus1.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          },\n          manual: {\n            transformation: [\n              {\n                crop: \"fit\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.2125),\n                height: size - Math.floor(size * 0.2),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus1.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          }\n        };\n      }\n    },\n\n    twibbon_binus2: {\n      category: \"binus\",\n      name: \"Binus 2\",\n      url:\n        \"https://res.cloudinary.com/fep-bot/image/upload/v1565372079/twibbon_binus2.png\",\n      transform: (filename, size) => {\n        return {\n          auto: {\n            transformation: [\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.225),\n                height: size - Math.floor(size * 0.225),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus2.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          },\n          manual: {\n            transformation: [\n              {\n                crop: \"fit\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.225),\n                height: size - Math.floor(size * 0.225),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus2.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          }\n        };\n      }\n    },\n\n    twibbon_binus3: {\n      category: \"binus\",\n      name: \"Binus 3\",\n      url:\n        \"https://res.cloudinary.com/fep-bot/image/upload/v1565372078/twibbon_binus3.png\",\n      transform: (filename, size) => {\n        return {\n          auto: {\n            transformation: [\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.225),\n                height: size - Math.floor(size * 0.225),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus3.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          },\n          manual: {\n            transformation: [\n              {\n                crop: \"fit\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.225),\n                height: size - Math.floor(size * 0.225),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus3.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          }\n        };\n      }\n    }\n  };\n\n  const ready = args => {\n    if (args.length <= 1) {\n      const data = {\n        category: args[0]\n      };\n\n      // ready-up switch\n      shared_props[Bot.getId().user][\"twibbon\"] = {\n        status: true,\n        source: {\n          id: Bot.getId().origin\n        }\n      };\n\n      display_list(data.category || \"all\");\n    } else {\n      Bot.replyText(`${command_prefix}twibbon <type>`);\n    }\n  };\n\n  const listen = data => {\n    const { user } = Bot.getId();\n\n    if (data.twibbon) {\n      const { id, type } = data.twibbon;\n\n      // ready-up switch\n      shared_props[user][\"twibbon\"] = {\n        id: id,\n        type: type,\n        status: true,\n        source: {\n          id: Bot.getId().origin\n        }\n      };\n\n      Bot.getProfile().then(res => {\n        const messages = [`Hai ${res.displayName}, masukan gambar mu disini~`];\n        if (type === \"manual\") {\n          messages.push(\n            `Pastikan 1:1 ya fotonya~\\n\\nTips: gunakan in-app camera line disamping kolom chat dan set ratio ke 1:1`\n          );\n        }\n        Bot.replyText(messages);\n      });\n    }\n  };\n\n  const display_list = category => {\n    let selected = [];\n    if (category === \"all\") {\n      selected = Object.keys(twibbon_list).map(twibbon_id => {\n        return twibbon_id;\n      });\n    } else {\n      selected = Object.keys(twibbon_list).map(twibbon_id => {\n        if (twibbon_list[twibbon_id].category === category) {\n          return twibbon_id;\n        }\n      });\n    }\n\n    const pure_selected = selected.filter(item => {\n      return typeof item === \"string\";\n    });\n\n    if (pure_selected.length === 0) {\n      Bot.replyText(`Tidak ada kategori, lihat di ${command_prefix}twibbon`);\n    }\n\n    const twibbon_contents = pure_selected.map(id => {\n      const { url, name } = twibbon_list[id];\n      return {\n        thumbnailImageUrl: url,\n        imageBackgroundColor: \"#FFFFFF\",\n        text: `${name}`,\n        actions: [\n          {\n            type: \"postback\",\n            label: \"Auto-AI Mode\",\n            data: `{\"twibbon\":{\"id\":\"${id}\",\"type\":\"auto\"}}`\n          },\n          {\n            type: \"postback\",\n            label: \"Manual Mode\",\n            data: `{\"twibbon\":{\"id\":\"${id}\",\"type\":\"manual\"}}`\n          }\n        ]\n      };\n    });\n\n    Bot.sendMessage({\n      type: \"template\",\n      altText: \"Twibbon list\",\n      template: {\n        type: \"carousel\",\n        columns: twibbon_contents,\n        imageAspectRatio: \"square\",\n        imageSize: \"cover\"\n      }\n    });\n  };\n\n  const getResult = (twibbon_setting, public_id, filename, size) => {\n    const result = cloudinary.url(\n      public_id,\n      twibbon_list[twibbon_setting.id].transform(filename, size)[\n        twibbon_setting.type\n      ]\n    );\n    return result;\n  };\n\n  const imgUpload = (url, filename) => {\n    return new Promise((resolve, reject) => {\n      cloudinary.uploader\n        .upload(url, { public_id: filename })\n        .then(image => {\n          console.log(\"** File Upload (Promise)\");\n          console.log(\"* \" + image.public_id);\n          console.log(\"* \" + image.url);\n          resolve(image);\n        })\n        .catch(err => {\n          console.log(\"** File Upload (Promise)\");\n          if (err) {\n            console.warn(err);\n            reject(err);\n          }\n        });\n    });\n  };\n\n  const waitForAllUploads = (type, queue, imageObject, callback) => {\n    uploads[type] = {\n      ...uploads[type],\n      ...imageObject\n    };\n    const ids = Object.keys(uploads[type]);\n    if (ids.length === queue) {\n      console.log(\n        \"**  uploaded all raw files (\" + ids.join(\",\") + \") to cloudinary\"\n      );\n      callback();\n    }\n  };\n\n  const generate = data => {\n    return new Promise((resolve, reject) => {\n      imgUpload(data.url, data.filename).then(image => {\n        waitForAllUploads(\n          \"raw\",\n          1,\n          {\n            twibbon_bg: image\n          },\n          performTransformations\n        );\n      });\n\n      const performTransformations = () => {\n        const twibbon_ori_name = `${data.filename}-twibbon`;\n        const result_url = getResult(\n          data.twibbonSetting,\n          uploads.raw.twibbon_bg.public_id,\n          twibbon_ori_name,\n          1040\n        );\n\n        const twibbon_preview_name = `${data.filename}-twibbon-preview`;\n        const result_preview_url = getResult(\n          data.twibbonSetting,\n          uploads.raw.twibbon_bg.public_id,\n          twibbon_preview_name,\n          240\n        );\n\n        imgUpload(result_url, twibbon_ori_name).then(image => {\n          waitForAllUploads(\n            \"twibbon\",\n            2,\n            {\n              original: image\n            },\n            performResolve\n          );\n        });\n\n        imgUpload(result_preview_url, twibbon_preview_name).then(image => {\n          waitForAllUploads(\n            \"twibbon\",\n            2,\n            {\n              preview: image\n            },\n            performResolve\n          );\n        });\n\n        const performResolve = () => {\n          resolve({\n            twibbonOriginalUrl: `${uploads.twibbon.original.secure_url}`,\n            twibbonPreviewUrl: `${uploads.twibbon.preview.secure_url}`\n          });\n\n          fs.unlinkSync(data.originalPath);\n          fs.unlinkSync(data.previewPath);\n        };\n      };\n    });\n  };\n\n  const make = args => {\n    const data = {\n      url: args[0],\n      originalPath: args[1],\n      previewPath: args[2],\n      twibbonSetting: args[3],\n      filename: Bot.props.event.message.id\n    };\n\n    generate(data).then(({ twibbonOriginalUrl, twibbonPreviewUrl }) => {\n      Bot.sendMessage({\n        type: \"image\",\n        originalContentUrl: twibbonOriginalUrl,\n        previewImageUrl: twibbonPreviewUrl\n      });\n    });\n\n    //switch back\n    shared_props[Bot.getId().user].twibbon.status = false;\n  };\n\n  const insert = getContent => {\n    const { userId, originId } = Bot.getId();\n\n    if (shared_props[userId].twibbon) {\n      const userSwitch = shared_props[userId].twibbon.status;\n\n      const userInSameCommunal =\n        shared_props[userId].twibbon.source.id === originId;\n\n      const twibbonIdChosen = shared_props[userId].twibbon.id !== undefined;\n\n      if (userSwitch && userInSameCommunal && twibbonIdChosen) {\n        const twibbonSetting = {\n          id: shared_props[userId].twibbon.id,\n          type: shared_props[userId].twibbon.type\n        };\n\n        getContent().then(\n          ({\n            originalPath,\n            previewPath,\n            originalContentUrl,\n            previewImageUrl\n          }) => {\n            make([\n              originalContentUrl,\n              originalPath,\n              previewPath,\n              twibbonSetting\n            ]);\n          }\n        );\n      }\n    }\n  };\n\n  return { ready, insert, listen };\n};\n"]}