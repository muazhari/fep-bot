{"version":3,"sources":["../../../src/Bot/Features/Twibbon.js"],"names":["objectsHaveSameKeys","objects","allKeys","reduce","keys","object","concat","Object","union","Set","every","size","length","Twibbon","Bot","uploads","manual_transform","twibbon_overlay","filename","transformation","crop","width","height","format","public_id","overlay","flags","aspect_ratio","twibbon_list","twibbon_cs","category","name","url","transform","auto","gravity","y","Math","floor","x","manual","twibbon_tfi","twibbon_binus1","twibbon_binus2","twibbon_binus3","ready","args","data","shared_props","getId","user","status","source","id","default","display_list","replyText","command_prefix","listen","twibbon","type","profile","then","res","messages","displayName","push","selected","map","twibbon_id","pure_selected","filter","item","twibbon_contents","sendMessage","getResult","twibbon_setting","result","cloudinary","imgUpload","Promise","resolve","reject","uploader","upload","image","console","log","catch","err","warn","waitForAllUploads","queue","imageObject","callback","ids","join","generate","twibbon_bg","performTransformations","twibbon_ori_name","result_url","twibbonSetting","raw","twibbon_preview_name","result_preview_url","original","performResolve","preview","twibbonOriginalUrl","secure_url","twibbonPreviewUrl","fs","unlinkSync","originalPath","previewPath","make","props","event","message","originalContentUrl","previewImageUrl","insert","getContent","userSwitch","undefined","userInSameCommunal","twibbon_id_chosen"],"mappings":";;;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,SAASA,mBAAT,CAA6B,GAAGC,OAAhC,EAAyC;AACrC,UAAMC,UAAUD,QAAQE,MAAR,CAAe,CAACC,IAAD,EAAOC,MAAP,KAAkBD,KAAKE,MAAL,CAAYC,OAAOH,IAAP,CAAYC,MAAZ,CAAZ,CAAjC,EAAmE,EAAnE,CAAhB;AACA,UAAMG,QAAQ,IAAIC,GAAJ,CAAQP,OAAR,CAAd;AACA,WAAOD,QAAQS,KAAR,CAAcL,UAAUG,MAAMG,IAAN,KAAeJ,OAAOH,IAAP,CAAYC,MAAZ,EAAoBO,MAA3D,CAAP;AACH;;AAEM,MAAMC,4BAAUC,OAAO;AAC1B,UAAMC,UAAU,EAAhB;;AAEA,UAAMC,mBAAmB,CAACC,eAAD,EAAkBC,QAAlB,EAA4BP,IAA5B,KAAqC;AAC5D,eAAO;AACGQ,4BAAgB,CACR;AACIC,sBAAM,KADV;AAEIC,uBAAOV,IAFX;AAGIW,wBAAQX,IAHZ;AAIIY,wBAAQ,KAJZ;AAKIC,2BAAY,GAAEN,QAAS;;AAL3B,aADQ,EASR;AACIO,yBAASR,eADb;AAEIS,uBAAO,UAFX;AAGIL,uBAAOV,IAHX;AAIIW,wBAAQX,IAJZ;AAKIgB,8BAAc;AALlB,aATQ;AADnB,SAAP;AAmBD,KApBD;;AAsBA,UAAMC,eAAe;AACjBC,oBAAY;AACRC,sBAAU,MADF;AAERC,kBAAM,kBAFE;AAGRC,iBAAK,4EAHG;AAIRC,uBAAW,CAACf,QAAD,EAAWP,IAAX,KAAoB;AAC3B,uBAAO;AACLuB,0BAAM;AACJf,wCAAgB,CACZ;AACIgB,qCAAS,MADb;AAEIf,kCAAM,MAFV;AAGIG,oCAAQ,KAHZ;AAIII,0CAAc,KAJlB;AAKIH,uCAAY,GAAEN,QAAS;AAL3B,yBADY,EAOT;AACCiB,qCAAS,MADV;AAECf,kCAAM,UAFP;AAGCC,mCAAOV,IAHR;AAICW,oCAAQX,IAJT;AAKCyB,+BAAGC,KAAKC,KAAL,CAAW,CAAC3B,IAAD,GAAQ,GAAnB,CALJ;AAMC4B,+BAAGF,KAAKC,KAAL,CAAW3B,OAAO,KAAlB;AANJ,yBAPS,EAcT;AACCc,qCAAS,gBADV;AAECC,mCAAO,UAFR;AAGCL,mCAAOV,IAHR;AAICW,oCAAQX,IAJT;AAKCgB,0CAAc;AALf,yBAdS;AADZ,qBADD;AAyBLa,4BAAQ;AACNrB,wCAAgB,CACZ;AACIC,kCAAM,KADV;AAEIG,oCAAQ,KAFZ;AAGIF,mCAAOV,IAHX;AAIIW,oCAAQX,IAJZ;AAKIa,uCAAY,GAAEN,QAAS;AAL3B,yBADY,EAOT;AACCO,qCAAS,gBADV;AAECC,mCAAO,UAFR;AAGCL,mCAAOV,IAHR;AAICW,oCAAQX,IAJT;AAKCgB,0CAAc;AALf,yBAPS;AADV;AAzBH,iBAAP;AA2CH;AAhDO,SADK;;AAoDjBc,qBAAa;AACTX,sBAAU,KADD;AAETC,kBAAM,qBAFG;AAGTC,iBAAK,6EAHI;AAITC,uBAAW,CAACf,QAAD,EAAWP,IAAX,KAAoB;AAC3B,uBAAO;AACCuB,0BAAM;AACFf,wCAAgB,CACZ;AACIgB,qCAAS,MADb;AAEIf,kCAAM,MAFV;AAGIG,oCAAQ,KAHZ;AAII;AACAF,mCAAOV,OAAO0B,KAAKC,KAAL,CAAW,CAAC3B,IAAD,GAAQ,KAAnB,CALlB;AAMIW,oCAAQX,OAAO0B,KAAKC,KAAL,CAAW3B,OAAO,GAAlB,CANnB;AAOI4B,+BAAGF,KAAKC,KAAL,CAAW3B,OAAO,KAAlB,CAPP;AAQIyB,+BAAGC,KAAKC,KAAL,CAAW,CAAC3B,IAAD,GAAQ,GAAnB,CARP;AASIa,uCAAY,GAAEN,QAAS;;AAT3B,yBADY,EAYT;AACCiB,qCAAS,MADV;AAECf,kCAAM,MAFP;AAGCC,mCAAOV,IAHR;AAICW,oCAAQX;AAJT,yBAZS,EAiBT;AACCc,qCAAS,iBADV;AAECC,mCAAO,UAFR;AAGCL,mCAAOV,IAHR;AAICW,oCAAQX,IAJT;AAKCgB,0CAAc;AALf,yBAjBS;AADd,qBADP;AA4BDa,4BAAQ;AACFrB,wCAAgB,CACZ;AACIC,kCAAM,KADV;AAEIG,oCAAQ,KAFZ;AAGI;AACAF,mCAAOV,IAJX;AAKIW,oCAAQX,IALZ;AAMIa,uCAAY,GAAEN,QAAS;;AAN3B,yBADY,EAST;AACCO,qCAAS,iBADV;AAECC,mCAAO,UAFR;AAGCL,mCAAOV,IAHR;AAICW,oCAAQX,IAJT;AAKCgB,0CAAc;AALf,yBATS;AADd;AA5BP,iBAAP;AAgDH;AArDQ,SApDI;;AA4GnBe,wBAAgB;AACVZ,sBAAU,OADA;AAEVC,kBAAM,SAFI;AAGVC,iBAAK,gFAHK;AAIVC,uBAAW,CAACf,QAAD,EAAWP,IAAX,KAAoB;AAC3B,uBAAO;AACLuB,0BAAM;AACJf,wCAAgB,CACZ;AACIgB,qCAAS,MADb;AAEIf,kCAAM,MAFV;AAGIG,oCAAQ,KAHZ;AAII;AACAF,mCAAOV,OAAO0B,KAAKC,KAAL,CAAW3B,OAAO,GAAlB,CALlB;AAMIW,oCAAQX,OAAO0B,KAAKC,KAAL,CAAW3B,OAAO,GAAlB,CANnB;AAOIa,uCAAY,GAAEN,QAAS;AAP3B,yBADY,EAST;AACCO,qCAAS,oBADV;AAECC,mCAAO,UAFR;AAGCL,mCAAOV,IAHR;AAICW,oCAAQX,IAJT;AAKCgB,0CAAc;AALf,yBATS;AADZ,qBADD;AAoBLa,4BAAQ;AACNrB,wCAAgB,CACZ;AACIC,kCAAM,KADV;AAEIG,oCAAQ,KAFZ;AAGI;AACAF,mCAAOV,OAAO0B,KAAKC,KAAL,CAAW3B,OAAO,MAAlB,CAJlB;AAKIW,oCAAQX,OAAO0B,KAAKC,KAAL,CAAW3B,OAAO,GAAlB,CALnB;AAMIa,uCAAY,GAAEN,QAAS;AAN3B,yBADY,EAQT;AACCO,qCAAS,oBADV;AAECC,mCAAO,UAFR;AAGCL,mCAAOV,IAHR;AAICW,oCAAQX,IAJT;AAKCgB,0CAAc;AALf,yBARS;AADV;AApBH,iBAAP;AAuCH;AA5CS,SA5GG;;AA2JnBgB,wBAAgB;AACVb,sBAAU,OADA;AAEVC,kBAAM,SAFI;AAGVC,iBAAK,gFAHK;AAIVC,uBAAW,CAACf,QAAD,EAAWP,IAAX,KAAoB;AAC3B,uBAAO;AACLuB,0BAAM;AACJf,wCAAgB,CACZ;AACIgB,qCAAS,MADb;AAEIf,kCAAM,MAFV;AAGIG,oCAAQ,KAHZ;AAII;AACAF,mCAAOV,OAAO0B,KAAKC,KAAL,CAAW3B,OAAO,KAAlB,CALlB;AAMIW,oCAAQX,OAAO0B,KAAKC,KAAL,CAAW3B,OAAO,KAAlB,CANnB;AAOIa,uCAAY,GAAEN,QAAS;;AAP3B,yBADY,EAUT;AACCO,qCAAS,oBADV;AAECC,mCAAO,UAFR;AAGCL,mCAAOV,IAHR;AAICW,oCAAQX,IAJT;AAKCgB,0CAAc;AALf,yBAVS;AADZ,qBADD;AAqBLa,4BAAQ;AACNrB,wCAAgB,CACZ;AACIC,kCAAM,KADV;AAEIG,oCAAQ,KAFZ;AAGI;AACAF,mCAAOV,OAAO0B,KAAKC,KAAL,CAAW3B,OAAO,KAAlB,CAJlB;AAKIW,oCAAQX,OAAO0B,KAAKC,KAAL,CAAW3B,OAAO,KAAlB,CALnB;AAMIa,uCAAY,GAAEN,QAAS;;AAN3B,yBADY,EAST;AACCO,qCAAS,oBADV;AAECC,mCAAO,UAFR;AAGCL,mCAAOV,IAHR;AAICW,oCAAQX,IAJT;AAKCgB,0CAAc;AALf,yBATS;AADV;AArBH,iBAAP;AAyCH;AA9CS,SA3JG;;AA4MnBiB,wBAAgB;AACVd,sBAAU,OADA;AAEVC,kBAAM,SAFI;AAGVC,iBAAK,gFAHK;AAIVC,uBAAW,CAACf,QAAD,EAAWP,IAAX,KAAoB;AAC3B,uBAAO;AACLuB,0BAAM;AACJf,wCAAgB,CACZ;AACIgB,qCAAS,MADb;AAEIf,kCAAM,MAFV;AAGIG,oCAAQ,KAHZ;AAII;AACAF,mCAAOV,OAAO0B,KAAKC,KAAL,CAAW3B,OAAO,KAAlB,CALlB;AAMIW,oCAAQX,OAAO0B,KAAKC,KAAL,CAAW3B,OAAO,KAAlB,CANnB;AAOIa,uCAAY,GAAEN,QAAS;;AAP3B,yBADY,EAUT;AACCO,qCAAS,oBADV;AAECC,mCAAO,UAFR;AAGCL,mCAAOV,IAHR;AAICW,oCAAQX,IAJT;AAKCgB,0CAAc;AALf,yBAVS;AADZ,qBADD;AAqBLa,4BAAQ;AACNrB,wCAAgB,CACZ;AACIC,kCAAM,KADV;AAEIG,oCAAQ,KAFZ;AAGI;AACAF,mCAAOV,OAAO0B,KAAKC,KAAL,CAAW3B,OAAO,KAAlB,CAJlB;AAKIW,oCAAQX,OAAO0B,KAAKC,KAAL,CAAW3B,OAAO,KAAlB,CALnB;AAMIa,uCAAY,GAAEN,QAAS;;AAN3B,yBADY,EAST;AACCO,qCAAS,oBADV;AAECC,mCAAO,UAFR;AAGCL,mCAAOV,IAHR;AAICW,oCAAQX,IAJT;AAKCgB,0CAAc;AALf,yBATS;AADV;AArBH,iBAAP;AAyCH;AA9CS;;AA5MG,KAArB;;AA+PA,UAAMkB,QAASC,IAAD,IAAU;AACpB,YAAIA,KAAKlC,MAAL,IAAe,CAAnB,EAAsB;AAClB,kBAAMmC,OAAO;AACTjB,0BAAUgB,KAAK,CAAL;;AAGd;AAJa,aAAb,CAKAE,kBAAalC,IAAImC,KAAJ,GAAYC,IAAzB,EAA+B,SAA/B,IAA4C;AACxCC,wBAAQ,IADgC;AAExCC,wBAAQ;AACJC,wBAAIvC,IAAImC,KAAJ,GAAYK;AADZ;AAFgC,aAA5C;;AAOAC,yBAAaR,KAAKjB,QAAL,IAAiB,KAA9B;AACH,SAdD,MAcO;AACHhB,gBAAI0C,SAAJ,CAAe,GAAEC,mBAAe,gBAAhC;AACH;AAEJ,KAnBD;;AAqBA,UAAMC,SAAUX,IAAD,IAAU;AACrB,cAAM,EAACG,IAAD,KAASpC,IAAImC,KAAJ,EAAf;;AAEA,YAAIF,KAAKY,OAAT,EAAkB;AACd,kBAAM,EAACN,EAAD,EAAKO,IAAL,KAAab,KAAKY,OAAxB;;AAEA;AACAX,8BAAaE,IAAb,EAAmB,SAAnB,IAAgC;AAC5BG,oBAAIA,EADwB;AAE5BO,sBAAMA,IAFsB;AAG5BT,wBAAQ,IAHoB;AAI5BC,wBAAQ;AACJC,wBAAIvC,IAAImC,KAAJ,GAAYK;AADZ;AAJoB,aAAhC;;AAUAxC,gBAAI+C,OAAJ,GAAcC,IAAd,CAAmBC,OAAO;AACxB,sBAAMC,WAAW,CAAE,OAAMD,IAAIE,WAAY,6BAAxB,CAAjB;AACA,oBAAIL,SAAS,QAAb,EAAuB;AACrBI,6BAASE,IAAT,CAAe,wGAAf;AACD;AACDpD,oBAAI0C,SAAJ,CAAcQ,QAAd;AACD,aAND;AAQH;AACJ,KA1BD;;AA4BA,UAAMT,eAAgBzB,QAAD,IAAc;AAC/B,YAAIqC,WAAW,EAAf;AACA,YAAIrC,aAAa,KAAjB,EAAwB;AACpBqC,uBAAW5D,OAAOH,IAAP,CAAYwB,YAAZ,EAA0BwC,GAA1B,CAA+BC,UAAD,IAAgB;AACrD,uBAAOA,UAAP;AACH,aAFU,CAAX;AAGH,SAJD,MAIO;AACHF,uBAAW5D,OAAOH,IAAP,CAAYwB,YAAZ,EAA0BwC,GAA1B,CAA+BC,UAAD,IAAgB;AACrD,oBAAIzC,aAAayC,UAAb,EAAyBvC,QAAzB,KAAsCA,QAA1C,EAAoD;AAChD,2BAAOuC,UAAP;AACH;AACJ,aAJU,CAAX;AAKH;;AAED,cAAMC,gBAAgBH,SAASI,MAAT,CAAiBC,IAAD,IAAU;AAC5C,mBAAO,OAAOA,IAAP,KAAe,QAAtB;AACH,SAFqB,CAAtB;;AAIA,YAAIF,cAAc1D,MAAd,KAAyB,CAA7B,EAAgC;AAC5BE,gBAAI0C,SAAJ,CAAe,gCAA+BC,mBAAe,SAA7D;AACH;;AAED,cAAMgB,mBAAmBH,cAAcF,GAAd,CAAkBf,MAAM;;AAE7C,kBAAM,EAACrB,GAAD,EAAMD,IAAN,KAAcH,aAAayB,EAAb,CAApB;AACA,mBAAO;AACH,qCAAqBrB,GADlB;AAEH,wCAAwB,SAFrB;AAGH,wBAAS,GAAED,IAAK,EAHb;AAIH,2BAAW,CACP;AACI,4BAAQ,UADZ;AAEI,6BAAS,cAFb;AAGI,4BAAS,qBAAoBsB,EAAG;AAHpC,iBADO,EAMP;AACI,4BAAQ,UADZ;AAEI,6BAAS,aAFb;AAGI,4BAAS,qBAAoBA,EAAG;AAHpC,iBANO;AAJR,aAAP;AAkBH,SArBwB,CAAzB;;AAuBAvC,YAAI4D,WAAJ,CAAgB;AACZ,oBAAQ,UADI;AAEZ,uBAAW,cAFC;AAGZ,wBAAY;AACR,wBAAQ,UADA;AAER,2BAAWD,gBAFH;AAGR,oCAAoB,QAHZ;AAIR,6BAAa;AAJL;AAHA,SAAhB;AAUH,KAvDD;;AAyDA,UAAME,YAAY,CAACC,eAAD,EAAkBpD,SAAlB,EAA6BN,QAA7B,EAAuCP,IAAvC,KAAgD;AAC9D,cAAMkE,SAASC,qBAAW9C,GAAX,CAAeR,SAAf,EAA0BI,aAAagD,gBAAgBvB,EAA7B,EAAiCpB,SAAjC,CAA2Cf,QAA3C,EAAqDP,IAArD,EAA2DiE,gBAAgBhB,IAA3E,CAA1B,CAAf;AACA,eAAOiB,MAAP;AACH,KAHD;;AAKA,UAAME,YAAY,CAAC/C,GAAD,EAAMd,QAAN,KAAmB;AACjC,eAAO,IAAI8D,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCJ,iCAAWK,QAAX,CAAoBC,MAApB,CAA2BpD,GAA3B,EAAgC,EAACR,WAAWN,QAAZ,EAAhC,EAAuD4C,IAAvD,CAA4DuB,SAAS;AACjEC,wBAAQC,GAAR,CAAY,0BAAZ;AACAD,wBAAQC,GAAR,CAAY,OAAOF,MAAM7D,SAAzB;AACA8D,wBAAQC,GAAR,CAAY,OAAOF,MAAMrD,GAAzB;AACAiD,wBAAQI,KAAR;AACH,aALD,EAKGG,KALH,CAKSC,OAAO;AACZH,wBAAQC,GAAR,CAAY,0BAAZ;AACA,oBAAIE,GAAJ,EAAS;AACLH,4BAAQI,IAAR,CAAaD,GAAb;AACAP,2BAAOO,GAAP;AACH;AACJ,aAXD;AAYH,SAbM,CAAP;AAcH,KAfD;;AAiBA,UAAME,oBAAoB,CAAC/B,IAAD,EAAOgC,KAAP,EAAcC,WAAd,EAA2BC,QAA3B,KAAwC;AAC9D/E,gBAAQ6C,IAAR,iBACO7C,QAAQ6C,IAAR,CADP,EAEOiC,WAFP;AAIA,cAAME,MAAMxF,OAAOH,IAAP,CAAYW,QAAQ6C,IAAR,CAAZ,CAAZ;AACA,YAAImC,IAAInF,MAAJ,KAAegF,KAAnB,EAA0B;AACtBN,oBAAQC,GAAR,CAAY,iCAAiCQ,IAAIC,IAAJ,CAAS,GAAT,CAAjC,GAAiD,iBAA7D;AACAF;AACH;AAEJ,KAXD;;AAaA,UAAMG,WAAYlD,IAAD,IAAU;AACvB,eAAO,IAAIiC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACpCH,sBAAUhC,KAAKf,GAAf,EAAoBe,KAAK7B,QAAzB,EAAmC4C,IAAnC,CAAwCuB,SAAS;AAC7CM,kCAAkB,KAAlB,EAAyB,CAAzB,EAA4B;AACxBO,gCAAYb;AADY,iBAA5B,EAEGc,sBAFH;AAGH,aAJD;;AAMA,kBAAMA,yBAAyB,MAAM;AACjC,sBAAMC,mBAAoB,GAAErD,KAAK7B,QAAS,UAA1C;AACA,sBAAMmF,aAAa1B,UAAU5B,KAAKuD,cAAf,EAA+BvF,QAAQwF,GAAR,CAAYL,UAAZ,CAAuB1E,SAAtD,EAAiE4E,gBAAjE,EAAmF,IAAnF,CAAnB;;AAEA,sBAAMI,uBAAwB,GAAEzD,KAAK7B,QAAS,kBAA9C;AACA,sBAAMuF,qBAAqB9B,UAAU5B,KAAKuD,cAAf,EAA+BvF,QAAQwF,GAAR,CAAYL,UAAZ,CAAuB1E,SAAtD,EAAiEgF,oBAAjE,EAAuF,GAAvF,CAA3B;;AAEAzB,0BAAUsB,UAAV,EAAsBD,gBAAtB,EAAwCtC,IAAxC,CAA6CuB,SAAS;AAClDM,sCAAkB,SAAlB,EAA6B,CAA7B,EAAgC;AAC5Be,kCAAUrB;AADkB,qBAAhC,EAEGsB,cAFH;AAGH,iBAJD;;AAMA5B,0BAAU0B,kBAAV,EAA8BD,oBAA9B,EAAoD1C,IAApD,CAAyDuB,SAAS;AAC9DM,sCAAkB,SAAlB,EAA6B,CAA7B,EAAgC;AAC5BiB,iCAASvB;AADmB,qBAAhC,EAEGsB,cAFH;AAGH,iBAJD;;AAMA,sBAAMA,iBAAiB,MAAM;AACzB1B,4BAAQ,EAAC4B,oBAAqB,GAAE9F,QAAQ4C,OAAR,CAAgB+C,QAAhB,CAAyBI,UAAW,EAA5D,EAA+DC,mBAAoB,GAAEhG,QAAQ4C,OAAR,CAAgBiD,OAAhB,CAAwBE,UAAW,EAAxH,EAAR;;AAEAE,sCAAGC,UAAH,CAAclE,KAAKmE,YAAnB;AACAF,sCAAGC,UAAH,CAAclE,KAAKoE,WAAnB;AACH,iBALD;AAMH,aAzBD;AA0BH,SAjCM,CAAP;AAkCH,KAnCD;;AAqCA,UAAMC,OAAOtE,QAAQ;AACjB,YAAIA,KAAKlC,MAAL,KAAgB,CAApB,EAAuB;AACnB,kBAAMmC,OAAO;AACTf,qBAAKc,KAAK,CAAL,CADI;AAEToE,8BAAcpE,KAAK,CAAL,CAFL;AAGTqE,6BAAarE,KAAK,CAAL,CAHJ;AAITwD,gCAAgBxD,KAAK,CAAL,CAJP;AAKT5B,0BAAUJ,IAAIuG,KAAJ,CAAUC,KAAV,CAAgBC,OAAhB,CAAwBlE;AALzB,aAAb;;AAQA4C,qBAASlD,IAAT,EAAee,IAAf,CAAoB,CAAC,EAAC+C,kBAAD,EAAqBE,iBAArB,EAAD,KAA6C;AAC7DjG,oBAAI4D,WAAJ,CAAgB,EAACd,MAAM,OAAP,EAAgB4D,oBAAoBX,kBAApC,EAAwDY,iBAAiBV,iBAAzE,EAAhB;AACH,aAFD;;AAIA;AACA/D,8BAAalC,IAAImC,KAAJ,GAAYC,IAAzB,EAA+BS,OAA/B,CAAuCR,MAAvC,GAAgD,KAAhD;AAIH,SAlBD,MAkBO;AACHrC,gBAAI0C,SAAJ,CAAe,GAAEC,mBAAe,iBAAhC;AACH;AACJ,KAtBD;;AAwBA,UAAMiE,SAAUC,UAAD,IAAgB;AAC3B,cAAM,EAACzE,IAAD,KAASpC,IAAImC,KAAJ,EAAf;;AAEA,cAAM2E,aAAa5E,kBAAaE,IAAb,EAAmBS,OAAnB,CAA2BR,MAA3B,KAAsC0E,SAAtC,GACb,KADa,GAEb7E,kBAAaE,IAAb,EAAmBS,OAAnB,CAA2BR,MAFjC;;AAIA,cAAM2E,qBAAqB9E,kBAAaE,IAAb,EAAmBS,OAAnB,CAA2BP,MAA3B,CAAkCC,EAAlC,KAAyCvC,IAAImC,KAAJ,GAAYK,OAAhF;;AAEA,cAAMyE,oBAAoB/E,kBAAaE,IAAb,EAAmBS,OAAnB,CAA2BN,EAA3B,KAAkCwE,SAA5D;;AAEA,YAAID,cAAcE,kBAAd,IAAoCC,iBAAxC,EAA2D;AACvD,kBAAMzB,iBAAiB;AACnBjD,oBAAIL,kBAAaE,IAAb,EAAmBS,OAAnB,CAA2BN,EADZ;AAEnBO,sBAAMZ,kBAAaE,IAAb,EAAmBS,OAAnB,CAA2BC;AAFd,aAAvB;;AAKA+D,yBAAa7D,IAAb,CAAkB,CAAC,EAACoD,YAAD,EAAeC,WAAf,EAA4BK,kBAA5B,EAAgDC,eAAhD,EAAD,KAAsE;AACpFL,qBAAK,CAACI,kBAAD,EAAqBN,YAArB,EAAmCC,WAAnC,EAAgDb,cAAhD,CAAL;AACH,aAFD;AAGH;AAEJ,KAtBD;;AAwBA,WAAO,EAACzD,KAAD,EAAQ6E,MAAR,EAAgBhE,MAAhB,EAAP;AACH,CA3fM","file":"Twibbon.js","sourcesContent":["import {command_prefix, batch_list, baseURL, shared_props} from \"../../Bot\";\nimport FEPStoreCRUD from \"../../Bot/Helper/FEPStoreCRUD\";\nimport cloudinary from \"cloudinary\";\nimport fs from \"fs-extra\";\nimport request from \"request\";\nimport cp from \"child_process\";\nimport path from \"path\";\n\nfunction objectsHaveSameKeys(...objects) {\n    const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);\n    const union = new Set(allKeys);\n    return objects.every(object => union.size === Object.keys(object).length);\n}\n\nexport const Twibbon = Bot => {\n    const uploads = {};\n  \n    const manual_transform = (twibbon_overlay, filename, size) => {\n      return {\n                transformation: [\n                        {\n                            crop: \"fit\",\n                            width: size,\n                            height: size,\n                            format: \"jpg\",\n                            public_id: `${filename}-twibbon`\n\n                        },\n                        {\n                            overlay: twibbon_overlay,\n                            flags: \"relative\",\n                            width: size,\n                            height: size,\n                            aspect_ratio: \"1:1\"\n                        }\n                    ]\n              }\n    }\n\n    const twibbon_list = {\n        twibbon_cs: {\n            category: \"socs\",\n            name: \"Computer Science\",\n            url: \"https://res.cloudinary.com/fep-bot/image/upload/v1564639746/twibbon_cs.png\",\n            transform: (filename, size) => {\n                return {\n                  auto: {\n                    transformation: [\n                        {\n                            gravity: \"auto\",\n                            crop: \"fill\",\n                            format: \"jpg\",\n                            aspect_ratio: \"1:1\",\n                            public_id: `${filename}-twibbon`\n                        }, {\n                            gravity: \"auto\",\n                            crop: \"fill_pad\",\n                            width: size,\n                            height: size,\n                            y: Math.floor(-size * 0.2),\n                            x: Math.floor(size * 0.045)\n                        }, {\n                            overlay: \"twibbon_cs.png\",\n                            flags: \"relative\",\n                            width: size,\n                            height: size,\n                            aspect_ratio: \"1:1\"\n                        }\n                    ]\n                  },\n                  manual: {\n                    transformation: [\n                        {\n                            crop: \"fit\",\n                            format: \"jpg\",\n                            width: size,\n                            height: size,\n                            public_id: `${filename}-twibbon`,\n                        }, {\n                            overlay: \"twibbon_cs.png\",\n                            flags: \"relative\",\n                            width: size,\n                            height: size,\n                            aspect_ratio: \"1:1\"\n                        }\n                    ]\n                  },\n                }\n            }\n        },\n\n        twibbon_tfi: {\n            category: \"tfi\",\n            name: \"Teach For Indonesia\",\n            url: \"https://res.cloudinary.com/fep-bot/image/upload/v1565361689/twibbon_tfi.png\",\n            transform: (filename, size) => {\n                return { \n                        auto: {\n                            transformation: [\n                                {\n                                    gravity: \"auto\",\n                                    crop: \"fill\",\n                                    format: \"jpg\",\n                                    // aspect_ratio: \"1:1\",\n                                    width: size + Math.floor(-size * 0.045),\n                                    height: size + Math.floor(size * 0.2),\n                                    x: Math.floor(size * 0.045),\n                                    y: Math.floor(-size * 0.2),\n                                    public_id: `${filename}-twibbon`\n\n                                }, {\n                                    gravity: \"auto\",\n                                    crop: \"fill\",\n                                    width: size,\n                                    height: size,\n                                }, {\n                                    overlay: \"twibbon_tfi.png\",\n                                    flags: \"relative\",\n                                    width: size,\n                                    height: size,\n                                    aspect_ratio: \"1:1\"\n                                }\n                            ]\n                          },\n                      manual: {\n                            transformation: [\n                                {\n                                    crop: \"fit\",\n                                    format: \"jpg\",\n                                    // aspect_ratio: \"1:1\",\n                                    width: size,\n                                    height: size,\n                                    public_id: `${filename}-twibbon`\n\n                                }, {\n                                    overlay: \"twibbon_tfi.png\",\n                                    flags: \"relative\",\n                                    width: size,\n                                    height: size,\n                                    aspect_ratio: \"1:1\"\n                                }\n                            ]\n                          },\n              }\n            }\n        },\n      \n      twibbon_binus1: {\n            category: \"binus\",\n            name: \"Binus 1\",\n            url: \"https://res.cloudinary.com/fep-bot/image/upload/v1565372081/twibbon_binus1.png\",\n            transform: (filename, size) => {\n                return {\n                  auto: {\n                    transformation: [\n                        {\n                            gravity: \"auto\",\n                            crop: \"fill\",\n                            format: \"jpg\",\n                            // aspect_ratio: \"1:1\",\n                            width: size - Math.floor(size * 0.2),\n                            height: size - Math.floor(size * 0.2),\n                            public_id: `${filename}-twibbon`,\n                        }, {\n                            overlay: \"twibbon_binus1.png\",\n                            flags: \"relative\",\n                            width: size,\n                            height: size,\n                            aspect_ratio: \"1:1\"\n                        }\n                    ]\n                  },\n                  manual: {\n                    transformation: [\n                        {\n                            crop: \"fit\",\n                            format: \"jpg\",\n                            // aspect_ratio: \"1:1\",\n                            width: size - Math.floor(size * 0.2125),\n                            height: size - Math.floor(size * 0.2),\n                            public_id: `${filename}-twibbon`,\n                        }, {\n                            overlay: \"twibbon_binus1.png\",\n                            flags: \"relative\",\n                            width: size,\n                            height: size,\n                            aspect_ratio: \"1:1\"\n                        }\n                    ]\n                  },\n                }\n            }\n        },\n      \n      twibbon_binus2: {\n            category: \"binus\",\n            name: \"Binus 2\",\n            url: \"https://res.cloudinary.com/fep-bot/image/upload/v1565372079/twibbon_binus2.png\",\n            transform: (filename, size) => {\n                return {\n                  auto: {\n                    transformation: [\n                        {\n                            gravity: \"auto\",\n                            crop: \"fill\",\n                            format: \"jpg\",\n                            // aspect_ratio: \"1:1\",\n                            width: size - Math.floor(size * 0.225),\n                            height: size - Math.floor(size * 0.225),\n                            public_id: `${filename}-twibbon`\n                            \n                        }, {\n                            overlay: \"twibbon_binus2.png\",\n                            flags: \"relative\",\n                            width: size,\n                            height: size,\n                            aspect_ratio: \"1:1\"\n                        }\n                    ]\n                  },\n                  manual: {\n                    transformation: [\n                        {\n                            crop: \"fit\",\n                            format: \"jpg\",\n                            // aspect_ratio: \"1:1\",\n                            width: size - Math.floor(size * 0.225),\n                            height: size - Math.floor(size * 0.225),\n                            public_id: `${filename}-twibbon`\n                            \n                        }, {\n                            overlay: \"twibbon_binus2.png\",\n                            flags: \"relative\",\n                            width: size,\n                            height: size,\n                            aspect_ratio: \"1:1\"\n                        }\n                    ]\n                  }\n                }\n            }\n        },\n      \n      twibbon_binus3: {\n            category: \"binus\",\n            name: \"Binus 3\",\n            url: \"https://res.cloudinary.com/fep-bot/image/upload/v1565372078/twibbon_binus3.png\",\n            transform: (filename, size) => {\n                return {\n                  auto: {\n                    transformation: [\n                        {\n                            gravity: \"auto\",\n                            crop: \"fill\",\n                            format: \"jpg\",\n                            // aspect_ratio: \"1:1\",\n                            width: size - Math.floor(size * 0.225),\n                            height: size - Math.floor(size * 0.225),\n                            public_id: `${filename}-twibbon`\n                            \n                        }, {\n                            overlay: \"twibbon_binus3.png\",\n                            flags: \"relative\",\n                            width: size,\n                            height: size,\n                            aspect_ratio: \"1:1\"\n                        }\n                    ]\n                  }, \n                  manual: {\n                    transformation: [\n                        {\n                            crop: \"fit\",\n                            format: \"jpg\",\n                            // aspect_ratio: \"1:1\",\n                            width: size - Math.floor(size * 0.225),\n                            height: size - Math.floor(size * 0.225),\n                            public_id: `${filename}-twibbon`\n                            \n                        }, {\n                            overlay: \"twibbon_binus3.png\",\n                            flags: \"relative\",\n                            width: size,\n                            height: size,\n                            aspect_ratio: \"1:1\"\n                        }\n                    ]\n                  },\n                }\n            }\n        },\n\n    }\n\n    const ready = (args) => {\n        if (args.length <= 1) {\n            const data = {\n                category: args[0]\n            }\n\n            // ready-up switch\n            shared_props[Bot.getId().user][\"twibbon\"] = {\n                status: true,\n                source: {\n                    id: Bot.getId().default\n                }\n            };\n\n            display_list(data.category || \"all\")\n        } else {\n            Bot.replyText(`${command_prefix}twibbon <type>`);\n        }\n\n    };\n\n    const listen = (data) => {\n        const {user} = Bot.getId()\n\n        if (data.twibbon) {\n            const {id, type} = data.twibbon\n            \n            // ready-up switch\n            shared_props[user][\"twibbon\"] = {\n                id: id,\n                type: type,\n                status: true,\n                source: {\n                    id: Bot.getId().default\n                }\n            }\n          \n          \n            Bot.profile().then(res => {\n              const messages = [`Hai ${res.displayName}, masukan gambar mu disini~`]\n              if (type === \"manual\") {\n                messages.push(`Pastikan 1:1 ya fotonya~\\n\\nTips: gunakan in-app camera line disamping kolom chat dan set ratio ke 1:1`)\n              } \n              Bot.replyText(messages)\n            })\n            \n        }\n    }\n\n    const display_list = (category) => {\n        let selected = []\n        if (category === \"all\") {\n            selected = Object.keys(twibbon_list).map((twibbon_id) => {\n                return twibbon_id\n            })\n        } else {\n            selected = Object.keys(twibbon_list).map((twibbon_id) => {\n                if (twibbon_list[twibbon_id].category === category) {\n                    return twibbon_id\n                }\n            })\n        }\n      \n        const pure_selected = selected.filter((item) => {\n            return typeof item ==='string';  \n        });\n      \n        if (pure_selected.length === 0) {\n            Bot.replyText(`Tidak ada kategori, lihat di ${command_prefix}twibbon`)\n        }\n\n        const twibbon_contents = pure_selected.map(id => {\n          \n            const {url, name} = twibbon_list[id]\n            return {\n                \"thumbnailImageUrl\": url,\n                \"imageBackgroundColor\": \"#FFFFFF\",\n                \"text\": `${name}`,\n                \"actions\": [\n                    {\n                        \"type\": \"postback\",\n                        \"label\": \"Auto-AI Mode\",\n                        \"data\": `{\"twibbon\":{\"id\":\"${id}\",\"type\":\"auto\"}}`\n                    },\n                    {\n                        \"type\": \"postback\",\n                        \"label\": \"Manual Mode\",\n                        \"data\": `{\"twibbon\":{\"id\":\"${id}\",\"type\":\"manual\"}}`\n                    },\n                    \n                ]\n            }\n        })\n\n        Bot.sendMessage({\n            \"type\": \"template\",\n            \"altText\": \"Twibbon list\",\n            \"template\": {\n                \"type\": \"carousel\",\n                \"columns\": twibbon_contents,\n                \"imageAspectRatio\": \"square\",\n                \"imageSize\": \"cover\"\n            }\n        })\n    }\n\n    const getResult = (twibbon_setting, public_id, filename, size) => {\n        const result = cloudinary.url(public_id, twibbon_list[twibbon_setting.id].transform(filename, size)[twibbon_setting.type])\n        return result;\n    };\n\n    const imgUpload = (url, filename) => {\n        return new Promise((resolve, reject) => {\n            cloudinary.uploader.upload(url, {public_id: filename}).then(image => {\n                console.log(\"** File Upload (Promise)\");\n                console.log(\"* \" + image.public_id);\n                console.log(\"* \" + image.url);\n                resolve(image);\n            }).catch(err => {\n                console.log(\"** File Upload (Promise)\");\n                if (err) {\n                    console.warn(err);\n                    reject(err);\n                }\n            });\n        });\n    };\n\n    const waitForAllUploads = (type, queue, imageObject, callback) => {\n        uploads[type] = {\n            ...uploads[type],\n            ...imageObject\n        };\n        const ids = Object.keys(uploads[type]);\n        if (ids.length === queue) {\n            console.log(\"**  uploaded all raw files (\" + ids.join(\",\") + \") to cloudinary\");\n            callback();\n        }\n\n    };\n\n    const generate = (data) => {\n        return new Promise((resolve, reject) => {\n            imgUpload(data.url, data.filename).then(image => {\n                waitForAllUploads(\"raw\", 1, {\n                    twibbon_bg: image\n                }, performTransformations);\n            });\n\n            const performTransformations = () => {\n                const twibbon_ori_name = `${data.filename}-twibbon`;\n                const result_url = getResult(data.twibbonSetting, uploads.raw.twibbon_bg.public_id, twibbon_ori_name, 1040);\n\n                const twibbon_preview_name = `${data.filename}-twibbon-preview`;\n                const result_preview_url = getResult(data.twibbonSetting, uploads.raw.twibbon_bg.public_id, twibbon_preview_name, 240);\n\n                imgUpload(result_url, twibbon_ori_name).then(image => {\n                    waitForAllUploads(\"twibbon\", 2, {\n                        original: image\n                    }, performResolve);\n                });\n\n                imgUpload(result_preview_url, twibbon_preview_name).then(image => {\n                    waitForAllUploads(\"twibbon\", 2, {\n                        preview: image\n                    }, performResolve);\n                });\n\n                const performResolve = () => {\n                    resolve({twibbonOriginalUrl: `${uploads.twibbon.original.secure_url}`, twibbonPreviewUrl: `${uploads.twibbon.preview.secure_url}`});\n\n                    fs.unlinkSync(data.originalPath);\n                    fs.unlinkSync(data.previewPath);\n                };\n            };\n        });\n    }\n\n    const make = args => {\n        if (args.length === 4) {\n            const data = {\n                url: args[0],\n                originalPath: args[1],\n                previewPath: args[2],\n                twibbonSetting: args[3],\n                filename: Bot.props.event.message.id\n            };\n\n            generate(data).then(({twibbonOriginalUrl, twibbonPreviewUrl}) => {\n                Bot.sendMessage({type: \"image\", originalContentUrl: twibbonOriginalUrl, previewImageUrl: twibbonPreviewUrl});\n            })\n\n            //switch back\n            shared_props[Bot.getId().user].twibbon.status = false\n          \n            \n\n        } else {\n            Bot.replyText(`${command_prefix}twibbon <image>`);\n        }\n    };\n\n    const insert = (getContent) => {\n        const {user} = Bot.getId()\n\n        const userSwitch = shared_props[user].twibbon.status === undefined\n            ? false\n            : shared_props[user].twibbon.status;\n\n        const userInSameCommunal = shared_props[user].twibbon.source.id === Bot.getId().default\n\n        const twibbon_id_chosen = shared_props[user].twibbon.id !== undefined\n\n        if (userSwitch && userInSameCommunal && twibbon_id_chosen) {\n            const twibbonSetting = {\n                id: shared_props[user].twibbon.id,\n                type: shared_props[user].twibbon.type\n            }\n\n            getContent().then(({originalPath, previewPath, originalContentUrl, previewImageUrl}) => {\n                make([originalContentUrl, originalPath, previewPath, twibbonSetting])\n            });\n        }\n\n    }\n\n    return {ready, insert, listen};\n};\n"]}