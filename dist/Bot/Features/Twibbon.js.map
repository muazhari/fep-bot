{"version":3,"sources":["../../../src/Bot/Features/Twibbon.js"],"names":["objectsHaveSameKeys","objects","allKeys","reduce","keys","object","concat","Object","union","Set","every","size","length","Twibbon","Bot","userId","originId","getId","manual_transform","twibbon_overlay","filename","transformation","crop","width","height","format","public_id","overlay","flags","aspect_ratio","twibbon_list","twibbon_cs","category","name","url","transform","auto","gravity","y","Math","floor","x","manual","twibbon_tfi","twibbon_binus1","twibbon_binus2","twibbon_binus3","displayList","selected","map","twibbonId","filter","replyText","command_prefix","console","log","twibbonColumns","id","thumbnailImageUrl","imageBackgroundColor","text","actions","type","label","data","sendMessage","altText","template","columns","imageAspectRatio","imageSize","ready","args","shared_props","status","source","listen","twibbon","getProfile","then","profile","messages","displayName","push","getTransformedFileUrl","twibbonSetting","publicId","result","cloudinary","generate","Promise","resolve","reject","CloudinaryUtils","upload","twibbonBackgroundMeta","performTransformations","twibbonOriginalName","resultOriginalUrl","twibonPreviewName","resultPreviewUrl","all","fileMeta","twibbonOriginalUrl","secure_url","twibbonPreviewUrl","fs","unlinkSync","originalPath","previewPath","make","props","event","message","originalContentUrl","previewImageUrl","insert","getContent","userSwitch","userInSameCommunal","twibbonIdChosen","undefined"],"mappings":"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","file":"Twibbon.js","sourcesContent":["import { command_prefix, batch_list, baseURL, shared_props } from \"../../Bot\";\nimport FEPStoreCRUD from \"../../Bot/Helper/FEPStoreCRUD\";\nimport CloudinaryUtils from \"../../Bot/Helper/CloudinaryUtils\";\nimport cloudinary from \"cloudinary\";\nimport fs from \"fs-extra\";\nimport request from \"request\";\nimport cp from \"child_process\";\nimport path from \"path\";\n\nconst objectsHaveSameKeys = (...objects) => {\n  const allKeys = objects.reduce(\n    (keys, object) => keys.concat(Object.keys(object)),\n    []\n  );\n  const union = new Set(allKeys);\n  return objects.every(object => union.size === Object.keys(object).length);\n};\n\nexport const Twibbon = Bot => {\n  const { userId, originId } = Bot.getId();\n\n  const manual_transform = (twibbon_overlay, filename, size) => {\n    return {\n      transformation: [\n        {\n          crop: \"fit\",\n          width: size,\n          height: size,\n          format: \"jpg\",\n          public_id: `${filename}-twibbon`\n        },\n        {\n          overlay: twibbon_overlay,\n          flags: \"relative\",\n          width: size,\n          height: size,\n          aspect_ratio: \"1:1\"\n        }\n      ]\n    };\n  };\n\n  const twibbon_list = {\n    twibbon_cs: {\n      category: \"socs\",\n      name: \"Computer Science\",\n      url:\n        \"https://res.cloudinary.com/fep-bot/image/upload/v1564639746/twibbon_cs.png\",\n      transform: (filename, size) => {\n        return {\n          auto: {\n            transformation: [\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                format: \"jpg\",\n                aspect_ratio: \"1:1\",\n                public_id: `${filename}-twibbon`\n              },\n              {\n                gravity: \"auto\",\n                crop: \"fill_pad\",\n                width: size,\n                height: size,\n                y: Math.floor(-size * 0.2),\n                x: Math.floor(size * 0.045)\n              },\n              {\n                overlay: \"twibbon_cs.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          },\n          manual: {\n            transformation: [\n              {\n                crop: \"fit\",\n                format: \"jpg\",\n                width: size,\n                height: size,\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_cs.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          }\n        };\n      }\n    },\n\n    twibbon_tfi: {\n      category: \"tfi\",\n      name: \"Teach For Indonesia\",\n      url:\n        \"https://res.cloudinary.com/fep-bot/image/upload/v1565361689/twibbon_tfi.png\",\n      transform: (filename, size) => {\n        return {\n          auto: {\n            transformation: [\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size + Math.floor(-size * 0.045),\n                height: size + Math.floor(size * 0.2),\n                x: Math.floor(size * 0.045),\n                y: Math.floor(-size * 0.2),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                width: size,\n                height: size\n              },\n              {\n                overlay: \"twibbon_tfi.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          },\n          manual: {\n            transformation: [\n              {\n                crop: \"fit\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size,\n                height: size,\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_tfi.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          }\n        };\n      }\n    },\n\n    twibbon_binus1: {\n      category: \"binus\",\n      name: \"Binus 1\",\n      url:\n        \"https://res.cloudinary.com/fep-bot/image/upload/v1565372081/twibbon_binus1.png\",\n      transform: (filename, size) => {\n        return {\n          auto: {\n            transformation: [\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.2),\n                height: size - Math.floor(size * 0.2),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus1.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          },\n          manual: {\n            transformation: [\n              {\n                crop: \"fit\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.2125),\n                height: size - Math.floor(size * 0.2),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus1.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          }\n        };\n      }\n    },\n\n    twibbon_binus2: {\n      category: \"binus\",\n      name: \"Binus 2\",\n      url:\n        \"https://res.cloudinary.com/fep-bot/image/upload/v1565372079/twibbon_binus2.png\",\n      transform: (filename, size) => {\n        return {\n          auto: {\n            transformation: [\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.225),\n                height: size - Math.floor(size * 0.225),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus2.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          },\n          manual: {\n            transformation: [\n              {\n                crop: \"fit\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.225),\n                height: size - Math.floor(size * 0.225),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus2.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          }\n        };\n      }\n    },\n\n    twibbon_binus3: {\n      category: \"binus\",\n      name: \"Binus 3\",\n      url:\n        \"https://res.cloudinary.com/fep-bot/image/upload/v1565372078/twibbon_binus3.png\",\n      transform: (filename, size) => {\n        return {\n          auto: {\n            transformation: [\n              {\n                gravity: \"auto\",\n                crop: \"fill\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.225),\n                height: size - Math.floor(size * 0.225),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus3.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          },\n          manual: {\n            transformation: [\n              {\n                crop: \"fit\",\n                format: \"jpg\",\n                // aspect_ratio: \"1:1\",\n                width: size - Math.floor(size * 0.225),\n                height: size - Math.floor(size * 0.225),\n                public_id: `${filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_binus3.png\",\n                flags: \"relative\",\n                width: size,\n                height: size,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          }\n        };\n      }\n    }\n  };\n\n  const displayList = category => {\n    let selected = Object.keys(twibbon_list)\n      .map(twibbonId => twibbonId)\n      .filter(twibbonId => typeof twibbonId === \"string\");\n\n    if (category) {\n      selected = Object.keys(twibbon_list).filter(\n        twibbonId => twibbon_list[twibbonId].category === category\n      );\n      if (selected.length === 0) {\n        return Bot.replyText(\n          `Tidak ada kategori, lihat di ${command_prefix}twibbon`\n        );\n      }\n    }\n\n    console.log(selected);\n\n    const twibbonColumns = selected.map(id => {\n      const { url, name } = twibbon_list[id];\n      return {\n        thumbnailImageUrl: url,\n        imageBackgroundColor: \"#FFFFFF\",\n        text: `${name}`,\n        actions: [\n          {\n            type: \"postback\",\n            label: \"Auto-AI Mode\",\n            data: `{\"twibbon\":{\"id\":\"${id}\",\"type\":\"auto\"}}`\n          },\n          {\n            type: \"postback\",\n            label: \"Manual Mode\",\n            data: `{\"twibbon\":{\"id\":\"${id}\",\"type\":\"manual\"}}`\n          }\n        ]\n      };\n    });\n\n    Bot.sendMessage({\n      type: \"template\",\n      altText: \"Twibbon list\",\n      template: {\n        type: \"carousel\",\n        columns: twibbonColumns,\n        imageAspectRatio: \"square\",\n        imageSize: \"cover\"\n      }\n    });\n  };\n\n  const ready = args => {\n    console.log(\"ready COMMAND\");\n    if (args.length <= 1) {\n      const data = {\n        category: args[0]\n      };\n\n      // ready-up switch\n      shared_props[userId][\"twibbon\"] = {\n        status: true,\n        source: {\n          id: originId\n        }\n      };\n\n      displayList(data.category);\n    } else {\n      Bot.replyText(`${command_prefix}twibbon <type>`);\n    }\n  };\n\n  const listen = data => {\n    if (data.twibbon) {\n      const { id, type } = data.twibbon;\n\n      // ready-up switch\n      shared_props[userId][\"twibbon\"] = {\n        id: id,\n        type: type,\n        status: true,\n        source: {\n          id: originId\n        }\n      };\n\n      Bot.getProfile().then(profile => {\n        const messages = [\n          `Hai ${profile.displayName}, masukan gambar mu disini~`\n        ];\n        if (type === \"manual\") {\n          messages.push(\n            `Pastikan 1:1 ya fotonya~\\n\\nTips: gunakan in-app camera line disamping kolom chat dan set ratio ke 1:1`\n          );\n        }\n        Bot.replyText(messages);\n      });\n    }\n  };\n\n  const getTransformedFileUrl = (twibbonSetting, publicId, filename, size) => {\n    const result = cloudinary.url(\n      publicId,\n      twibbon_list[twibbonSetting.id].transform(filename, size)[\n        twibbonSetting.type\n      ]\n    );\n    return result;\n  };\n\n  const generate = data => {\n    return new Promise((resolve, reject) => {\n      CloudinaryUtils.upload(data.url, data.filename).then(\n        twibbonBackgroundMeta => {\n          performTransformations(twibbonBackgroundMeta);\n        }\n      );\n\n      const performTransformations = twibbonBackgroundMeta => {\n        const twibbonOriginalName = `${data.filename}-twibbon`;\n        const resultOriginalUrl = getTransformedFileUrl(\n          data.twibbonSetting,\n          twibbonBackgroundMeta.public_id,\n          twibbonOriginalName,\n          1040\n        );\n\n        const twibonPreviewName = `${data.filename}-twibbon-preview`;\n        const resultPreviewUrl = getTransformedFileUrl(\n          data.twibbonSetting,\n          twibbonBackgroundMeta.public_id,\n          twibonPreviewName,\n          240\n        );\n\n        Promise.all([\n          CloudinaryUtils.upload(resultOriginalUrl, twibbonOriginalName),\n          CloudinaryUtils.upload(resultPreviewUrl, twibonPreviewName)\n        ]).then(fileMeta => {\n          resolve({\n            twibbonOriginalUrl: `${fileMeta[0].secure_url}`,\n            twibbonPreviewUrl: `${fileMeta[1].secure_url}`\n          });\n\n          fs.unlinkSync(data.originalPath);\n          fs.unlinkSync(data.previewPath);\n        });\n      };\n    });\n  };\n\n  const make = args => {\n    const data = {\n      url: args[0],\n      originalPath: args[1],\n      previewPath: args[2],\n      twibbonSetting: args[3],\n      filename: Bot.props.event.message.id\n    };\n\n    generate(data).then(({ twibbonOriginalUrl, twibbonPreviewUrl }) => {\n      Bot.sendMessage({\n        type: \"image\",\n        originalContentUrl: twibbonOriginalUrl,\n        previewImageUrl: twibbonPreviewUrl\n      });\n    });\n\n    //switch back\n    shared_props[userId].twibbon.status = false;\n  };\n\n  const insert = getContent => {\n    if (shared_props[userId].twibbon) {\n      const userSwitch = shared_props[userId].twibbon.status;\n\n      const userInSameCommunal =\n        shared_props[userId].twibbon.source.id === originId;\n\n      const twibbonIdChosen = shared_props[userId].twibbon.id !== undefined;\n\n      if (userSwitch && userInSameCommunal && twibbonIdChosen) {\n        const twibbonSetting = {\n          id: shared_props[userId].twibbon.id,\n          type: shared_props[userId].twibbon.type\n        };\n\n        getContent().then(\n          ({\n            originalPath,\n            previewPath,\n            originalContentUrl,\n            previewImageUrl\n          }) => {\n            make([\n              originalContentUrl,\n              originalPath,\n              previewPath,\n              twibbonSetting\n            ]);\n          }\n        );\n      }\n    }\n  };\n\n  return { ready, insert, listen };\n};\n"]}