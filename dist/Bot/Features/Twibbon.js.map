{"version":3,"sources":["../../../src/Bot/Features/Twibbon.js"],"names":["download","uri","path","Promise","resolve","reject","request","head","err","res","body","console","log","headers","pipe","fs","createWriteStream","on","Twibbon","Bot","uploads","make","args","length","data","filename","upload_stream","cloudinary","uploader","tags","public_id","image","warn","url","waitForAllUploads","file_reader","createReadStream","id","ids","Object","keys","join","performTransformations","result_url","twibbon_bg","transformation","gravity","aspect_ratio","crop","format","width","height","overlay","flags","twibbonOriginalPath","__dirname","twibbonPreviewPath","then","cp","execSync","twibbonOriginalUrl","baseURL","basename","twibbonPreviewUrl","replyText","name","campus","room","command_prefix"],"mappings":"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","file":"Twibbon.js","sourcesContent":["import { command_prefix, batch_list, baseURL } from \"../../Bot\";\nimport FEPStoreCRUD from \"../../Bot/Helper/FEPStoreCRUD\";\nimport cloudinary from \"cloudinary\";\nimport convert from \"xml-js\";\nimport fs from \"fs\";\nimport request from \"request\";\nimport path from \"path\";\nimport cp from \"child_process\";\nimport Store from \"../../Services/Store\";\n\nconst download = (uri, path) => {\n  return new Promise((resolve, reject) => {\n    request.head(uri, (err, res, body) => {\n      console.log(\"content-type:\", res.headers[\"content-type\"]);\n      console.log(\"content-length:\", res.headers[\"content-length\"]);\n\n      request(uri)\n        .pipe(fs.createWriteStream(path))\n        .on(\"close\", resolve())\n        .on(\"error\", reject);\n    });\n  });\n};\n\nexport const Twibbon = Bot => {\n  const uploads = {};\n\n  const make = args => {\n    if (args.length === 2) {\n      const data = {\n        path: args[0],\n        filename: args[1]\n      };\n\n      console.log(data);\n\n      return new Promise((resolve, reject) => {\n        const upload_stream = cloudinary.uploader.upload_stream(\n          { tags: \"twibbon_bg\", public_id: data.filename },\n          (err, image) => {\n            console.log(\"** Stream Upload\");\n            if (err) {\n              console.warn(err);\n              reject(err);\n            }\n            console.log(\"* \" + image.public_id);\n            console.log(\"* \" + image.url);\n            waitForAllUploads(\"twibbon_bg\", err, image);\n          }\n        );\n        const file_reader = fs.createReadStream(data.path).pipe(upload_stream);\n\n        const waitForAllUploads = (id, err, image) => {\n          uploads[id] = image;\n          const ids = Object.keys(uploads);\n          if (ids.length === 1) {\n            console.log(\n              \"**  uploaded all files (\" + ids.join(\",\") + \") to cloudinary\"\n            );\n            performTransformations();\n          }\n        };\n\n        const performTransformations = () => {\n          const result_url = cloudinary.url(uploads.twibbon_bg.public_id, {\n            transformation: [\n              {\n                gravity: \"auto\",\n                aspect_ratio: \"1:1\",\n                crop: \"fill\",\n                format: \"jpg\",\n                width: 1040,\n                height: 1040,\n                public_id: `${data.filename}-twibbon`\n              },\n              {\n                overlay: \"twibbon_cs.png\",\n                flags: \"relative\",\n                width: 1040,\n                height: 1040,\n                aspect_ratio: \"1:1\"\n              }\n            ]\n          });\n\n          const twibbonOriginalPath = path.join(\n            __dirname,\n            \"../../src/Bot/Assets/twibbon\",\n            `${data.filename}-twibbon.jpg`\n          );\n          const twibbonPreviewPath = path.join(\n            __dirname,\n            \"../../src/Bot/Assets/twibbon\",\n            `${data.filename}-twibbon-preview.jpg`\n          );\n\n          download(result_url, twibbonOriginalPath).then(() => {\n            cp.execSync(\n              `convert -resize 240x jpg:${twibbonOriginalPath} jpg:${twibbonPreviewPath}`\n            );\n\n            resolve({\n              twibbonOriginalUrl: `${baseURL}/twibbons/${path.basename(\n                twibbonOriginalPath\n              )}`,\n              twibbonPreviewUrl: `${baseURL}/twibbons/${path.basename(\n                twibbonPreviewPath\n              )}`\n            });\n          });\n        };\n      });\n      Bot.replyText(`Done!\\n${data.name} - ${data.campus} - ${data.room}`);\n    } else {\n      Bot.replyText(`${command_prefix}twibbon <image>`);\n    }\n  };\n\n  return {\n    make\n  };\n};\n"]}