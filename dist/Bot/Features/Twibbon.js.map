{"version":3,"sources":["../../../src/Bot/Features/Twibbon.js"],"names":["objectsHaveSameKeys","objects","allKeys","reduce","keys","object","concat","Object","union","Set","every","size","length","Twibbon","Bot","uploads","twibbon_list","twibbon_cs","name","url","transform","filename","transformation","gravity","crop","format","aspect_ratio","public_id","width","height","y","Math","floor","x","overlay","flags","twibbon_tfi","ready","shared_props","getId","user","status","source","id","default","display_list","listen","data","twibbon","type","profile","replyText","displayName","twibbon_contents","map","sendMessage","getResult","twibbon_id","result","cloudinary","imgUpload","Promise","resolve","reject","uploader","upload","then","image","console","log","catch","err","warn","waitForAllUploads","queue","imageObject","callback","ids","join","generate","twibbon_bg","performTransformations","twibbon_ori_name","result_url","twibbonSetting","raw","twibbon_preview_name","result_preview_url","original","performResolve","preview","twibbonOriginalUrl","secure_url","twibbonPreviewUrl","fs","unlinkSync","originalPath","previewPath","make","args","props","event","message","originalContentUrl","previewImageUrl","command_prefix","insert","getContent","userSwitch","undefined","userInSameCommunal","twibbon_id_chosen"],"mappings":"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","file":"Twibbon.js","sourcesContent":["import {command_prefix, batch_list, baseURL, shared_props} from \"../../Bot\";\nimport FEPStoreCRUD from \"../../Bot/Helper/FEPStoreCRUD\";\nimport cloudinary from \"cloudinary\";\nimport fs from \"fs-extra\";\nimport request from \"request\";\nimport cp from \"child_process\";\nimport path from \"path\";\n\nfunction objectsHaveSameKeys(...objects) {\n  const allKeys = objects.reduce((keys, object) => keys.concat(Object.keys(object)), []);\n  const union = new Set(allKeys);\n  return objects.every(object => union.size === Object.keys(object).length);\n}\n\nexport const Twibbon = Bot => {\n  const uploads = {};\n\n  const twibbon_list = {\n    twibbon_cs: {\n      name: \"Computer Science\",\n      url: \"https://res.cloudinary.com/fep-bot/image/upload/v1564639746/twibbon_cs.png\",\n      transform: (filename, size) => {\n        return {\n          transformation: [\n            {\n              gravity: \"auto\",\n              crop: \"fill\",\n              format: \"jpg\",\n              aspect_ratio: \"1:1\",\n              public_id: `${filename}-twibbon`\n            }, {\n              gravity: \"auto\",\n              crop: \"fill_pad\",\n              width: size,\n              height: size,\n              y: Math.floor(-size * 0.2),\n              x: Math.floor(size * 0.045)\n            }, {\n              overlay: \"twibbon_cs.png\",\n              flags: \"relative\",\n              width: size,\n              height: size,\n              aspect_ratio: \"1:1\"\n            }\n          ]\n        }\n      }\n    },\n\n    twibbon_tfi: {\n      name: \"Teach For Indonesia\",\n      url: \"https://res.cloudinary.com/fep-bot/image/upload/v1565361689/twibbon_tfi.png\",\n      transform: (filename, size) => {\n        return {\n          transformation: [\n            {\n              gravity: \"auto\",\n              crop: \"fill\",\n              format: \"jpg\",\n              aspect_ratio: \"1:1\",\n              public_id: `${filename}-twibbon`\n            }, {\n              gravity: \"auto\",\n              crop: \"fill_pad\",\n              width: size,\n              height: size,\n              y: Math.floor(-size * 0.2),\n              x: Math.floor(size * 0.045)\n            }, {\n              overlay: \"twibbon_tfi.png\",\n              flags: \"relative\",\n              width: size,\n              height: size,\n              aspect_ratio: \"1:1\"\n            }\n          ]\n        }\n      }\n    }\n\n  }\n\n  const ready = () => {\n    // ready-up switch\n    shared_props[Bot.getId().user][\"twibbon\"] = {\n      status: true,\n      source: {\n        id: Bot.getId().default\n      }\n    };\n\n    display_list()\n  };\n\n  const listen = async (data) => {\n    const {user} = Bot.getId()\n    if (data.twibbon) {\n      const {id, type} = data.twibbon\n      shared_props[user].twibbon = {\n        ...shared_props[user].twibbon,\n        id: id,\n        type: type,\n        status: true\n      }\n      const profile = await Bot.profile()\n      Bot.replyText(`Hai ${profile.displayName}, Masukan gambar mu disini~`)\n    }\n  }\n\n  const display_list = () => {\n    const twibbon_contents = Object.keys(twibbon_list).map(id => {\n      const {url, name} = twibbon_list[id]\n      return {\n        \"thumbnailImageUrl\": url,\n        \"imageBackgroundColor\": \"#FFFFFF\",\n        \"text\": `${name}`,\n        \"actions\": [\n          {\n            \"type\": \"postback\",\n            \"label\": \"Select\",\n            \"data\": `{\"twibbon\":{\"id\":\"${id}\",\"type\":\"auto\"}}`\n          }\n        ]\n      }\n\n    })\n\n    Bot.sendMessage({\n      \"type\": \"template\",\n      \"altText\": \"Twibbon list\",\n      \"template\": {\n        \"type\": \"carousel\",\n        \"columns\": twibbon_contents,\n        \"imageAspectRatio\": \"square\",\n        \"imageSize\": \"cover\"\n      }\n    })\n  }\n\n  const getResult = (twibbon_id, public_id, filename, size) => {\n    const result = cloudinary.url(public_id, twibbon_list[twibbon_id].transform(filename, size))\n    return result;\n  };\n\n  const imgUpload = (url, filename) => {\n    return new Promise((resolve, reject) => {\n      cloudinary.uploader.upload(url, {public_id: filename}).then(image => {\n        console.log(\"** File Upload (Promise)\");\n        console.log(\"* \" + image.public_id);\n        console.log(\"* \" + image.url);\n        resolve(image);\n      }).catch(err => {\n        console.log(\"** File Upload (Promise)\");\n        if (err) {\n          console.warn(err);\n          reject(err);\n        }\n      });\n    });\n  };\n\n  const waitForAllUploads = (type, queue, imageObject, callback) => {\n    uploads[type] = {\n      ...uploads[type],\n      ...imageObject\n    };\n    const ids = Object.keys(uploads[type]);\n    if (ids.length === queue) {\n      console.log(\"**  uploaded all raw files (\" + ids.join(\",\") + \") to cloudinary\");\n      callback();\n    }\n\n  };\n\n  const generate = (data) => {\n    return new Promise(async (resolve, reject) => {\n      imgUpload(data.url, data.filename).then(image => {\n        waitForAllUploads(\"raw\", 1, {\n          twibbon_bg: image\n        }, performTransformations);\n      });\n\n      const performTransformations = () => {\n        const twibbon_ori_name = `${data.filename}-twibbon`;\n        const result_url = getResult(data.twibbonSetting.id, uploads.raw.twibbon_bg.public_id, twibbon_ori_name, 1040);\n\n        const twibbon_preview_name = `${data.filename}-twibbon-preview`;\n        const result_preview_url = getResult(data.twibbonSetting.id, uploads.raw.twibbon_bg.public_id, twibbon_preview_name, 240);\n\n        imgUpload(result_url, twibbon_ori_name).then(image => {\n          waitForAllUploads(\"twibbon\", 2, {\n            original: image\n          }, performResolve);\n        });\n\n        imgUpload(result_preview_url, twibbon_preview_name).then(image => {\n          waitForAllUploads(\"twibbon\", 2, {\n            preview: image\n          }, performResolve);\n        });\n\n        const performResolve = () => {\n          resolve({twibbonOriginalUrl: `${uploads.twibbon.original.secure_url}`, twibbonPreviewUrl: `${uploads.twibbon.preview.secure_url}`});\n\n          fs.unlinkSync(data.originalPath);\n          fs.unlinkSync(data.previewPath);\n        };\n      };\n    });\n  }\n\n  const make = args => {\n    if (args.length === 4) {\n      const data = {\n        url: args[0],\n        originalPath: args[1],\n        previewPath: args[2],\n        twibbonSetting: args[3],\n        filename: Bot.props.event.message.id\n      };\n\n      generate(data).then(({twibbonOriginalUrl, twibbonPreviewUrl}) => {\n        Bot.sendMessage({type: \"image\", originalContentUrl: twibbonOriginalUrl, previewImageUrl: twibbonPreviewUrl});\n      })\n\n      //switch back\n      shared_props[Bot.getId().user].twibbon.status = false\n\n    } else {\n      Bot.replyText(`${command_prefix}twibbon <image>`);\n    }\n  };\n\n  const insert = (getContent) => {\n    const {user} = Bot.getId()\n\n    const userSwitch = shared_props[user].twibbon.status === undefined\n      ? false\n      : shared_props[user].twibbon.status;\n\n    const userInSameCommunal = shared_props[user].twibbon.source.id === Bot.getId().default\n\n    const twibbon_id_chosen = shared_props[user].twibbon.id !== undefined\n\n    if (userSwitch && userInSameCommunal && twibbon_id_chosen) {\n      const twibbonSetting = {\n        id: shared_props[user].twibbon.id,\n        type: shared_props[user].twibbon.type\n      }\n\n      getContent().then(({originalPath, previewPath, originalContentUrl, previewImageUrl}) => {\n        make([originalContentUrl, originalPath, previewPath, twibbonSetting])\n      });\n    }\n\n  }\n\n  return {ready, insert, listen};\n};\n"]}