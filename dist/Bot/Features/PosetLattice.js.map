{"version":3,"sources":["../../../src/Bot/Features/PosetLattice.js"],"names":["PosetLattice","Bot","make","data","Promise","resolve","reject","PLGenerator","run","then","result","JSON","parse","catch","generate","args","length","fileName","getId","origin","path","join","__dirname","console","log","cp","execSync","filePath","filePathPreview","sendMessage","type","originalContentUrl","previewImageUrl","replyText","fs","unlinkSync","err"],"mappings":";;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEO,MAAMA,sCAAeC,OAAO;AACjC,QAAMC,OAAOC,QAAQ;AACnB,WAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,sCAAYC,GAAZ,CAAgBL,IAAhB,EACGM,IADH,CACQC,UAAUL,QAAQM,KAAKC,KAAL,CAAWF,MAAX,CAAR,CADlB,EAEGG,KAFH,CAESP,MAFT;AAGD,KAJM,CAAP;AAKD,GAND;;AAQA,QAAMQ,WAAWC,QAAQ;AACvB,QAAIA,KAAKC,MAAL,IAAe,CAAnB,EAAsB;AACpB,YAAMb,OAAO,EAAb;AACAA,WAAK,SAAL,IAAkBY,KAAK,CAAL,CAAlB;AACAZ,WAAK,UAAL,IAAmB,WAAnB,CAHoB,CAGY;AAChC,YAAMc,WAAWhB,IAAIiB,KAAJ,GAAYC,MAA7B;AACAhB,WAAK,UAAL,IAAmBiB,eAAKC,IAAL,CACjBC,SADiB,EAEjB,iCAFiB,EAGhB,GAAEL,QAAS,MAHK,CAAnB;AAKAd,WAAK,iBAAL,IAA0BiB,eAAKC,IAAL,CACxBC,SADwB,EAExB,iCAFwB,EAGvB,GAAEL,QAAS,cAHY,CAA1B;;AAMAM,cAAQC,GAAR,CAAYrB,IAAZ;AACAD,WAAKC,IAAL,EACGM,IADH,CACQC,UAAU;AACda,gBAAQC,GAAR,CAAYd,MAAZ;AACAe,gCAAGC,QAAH,CACG,4BAA2BvB,KAAKwB,QAAS,QAAOxB,KAAKyB,eAAgB,EADxE;;AAIA3B,YAAI4B,WAAJ,CAAgB;AACdC,gBAAM,OADQ;AAEdC,8BAAoB5B,KAAKwB,QAFX;AAGdK,2BAAiB7B,KAAKyB;AAHR,SAAhB;;AAMA3B,YAAIgC,SAAJ,CAAcvB,MAAd;;AAEAwB,0BAAGC,UAAH,CAAchC,KAAKwB,QAAnB;AACAO,0BAAGC,UAAH,CAAchC,KAAKyB,eAAnB;AACD,OAjBH,EAkBGf,KAlBH,CAkBSuB,OAAO;AACZb,gBAAQC,GAAR,CAAY,oBAAZ,EAAkCY,GAAlC;AACD,OApBH;AAqBD,KAtCD,MAsCO;AACLnC,UAAIgC,SAAJ,CAAc,6BAAd;AACD;AACF,GA1CD;;AA4CA,SAAO,EAAEnB,QAAF,EAAP;AACD,CAtDM","file":"PosetLattice.js","sourcesContent":["import { command_prefix, batch_list } from \"../../Bot\";\nimport PLGenerator from \"../../Bot/Helper/PosetLatticeGenerator\";\nimport fs from \"fs-extra\";\nimport cp from \"child_process\";\nimport Store from \"../../Services/Store\";\nimport path from \"path\";\n\nexport const PosetLattice = Bot => {\n  const make = data => {\n    return new Promise((resolve, reject) => {\n      PLGenerator.run(data)\n        .then(result => resolve(JSON.parse(result)))\n        .catch(reject);\n    });\n  };\n\n  const generate = args => {\n    if (args.length >= 1) {\n      const data = {};\n      data[\"setList\"] = args[0];\n      data[\"relation\"] = \"divisible\"; // only this feature available\n      const fileName = Bot.getId().origin;\n      data[\"filePath\"] = path.join(\n        __dirname,\n        \"../Helper/PosetLatticeGenerator\",\n        `${fileName}.jpg`\n      );\n      data[\"filePathPreview\"] = path.join(\n        __dirname,\n        \"../Helper/PosetLatticeGenerator\",\n        `${fileName}-preview.jpg`\n      );\n\n      console.log(data);\n      make(data)\n        .then(result => {\n          console.log(result);\n          cp.execSync(\n            `convert -resize 240x jpg:${data.filePath} jpg:${data.filePathPreview}`\n          );\n\n          Bot.sendMessage({\n            type: \"image\",\n            originalContentUrl: data.filePath,\n            previewImageUrl: data.filePathPreview\n          });\n\n          Bot.replyText(result);\n\n          fs.unlinkSync(data.filePath);\n          fs.unlinkSync(data.filePathPreview);\n        })\n        .catch(err => {\n          console.log(\"Error PosetLattice\", err);\n        });\n    } else {\n      Bot.replyText(\"/pl <setList> [edge] [node]\");\n    }\n  };\n\n  return { generate };\n};\n"]}