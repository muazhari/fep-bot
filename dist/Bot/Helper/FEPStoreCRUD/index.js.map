{"version":3,"sources":["../../../../src/Bot/Helper/FEPStoreCRUD/index.js"],"names":["set_store","data","Promise","resolve","reject","Object","keys","batch_list","includes","batch","store","Store","getStore","undefined","selected_user_data","name","campus","room","push","setStore","fep","update_store","selectedUserData","parseInt","num","delete_store","length","splice"],"mappings":";;;;;;AAAA;;AACA;;;;AACA;;;;;;AAEA,MAAMA,YAAY,MAAMC,IAAN,IAAc;AAC9B,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,QAAI,CAACC,OAAOC,IAAP,CAAYC,eAAZ,EAAwBC,QAAxB,CAAiCP,KAAKQ,KAAtC,CAAL,EAAmD;AACjD,aAAOL,OAAO,uBAAP,CAAP;AACD;;AAED,QAAIM,QAAQ,MAAMC,gBAAMC,QAAN,CAAe,KAAf,CAAlB;AACA,QAAIF,UAAUG,SAAd,EAAyB;AACvBH,cAAQ,EAAE,CAACT,KAAKQ,KAAN,GAAc,EAAhB,EAAR;AACD;;AAED,UAAMK,qBAAqB,CAACb,KAAKc,IAAN,EAAYd,KAAKe,MAAjB,EAAyBf,KAAKgB,IAA9B,CAA3B;AACAP,UAAMT,KAAKQ,KAAX,EAAkBS,IAAlB,CAAuBJ,kBAAvB;AACA,UAAMH,gBAAMQ,QAAN,CAAe,EAAEC,KAAKV,KAAP,EAAf,CAAN;AACA,WAAOP,SAAP;AACD,GAdM,CAAP;AAeD,CAhBD;;AAkBA,MAAMkB,eAAe,MAAMpB,IAAN,IAAc;AACjC,SAAO,IAAIC,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC5C,QAAI,CAACC,OAAOC,IAAP,CAAYC,eAAZ,EAAwBC,QAAxB,CAAiCP,KAAKQ,KAAtC,CAAL,EAAmD;AACjD,aAAOL,OAAO,uBAAP,CAAP;AACD;;AAED,UAAMM,QAAQ,MAAMC,gBAAMC,QAAN,CAAe,KAAf,CAApB;AACA,UAAMU,mBAAmB,CAACrB,KAAKc,IAAN,EAAYd,KAAKe,MAAjB,EAAyBf,KAAKgB,IAA9B,CAAzB;AACAP,UAAMT,KAAKQ,KAAX,EAAkBc,SAAStB,KAAKuB,GAAd,EAAmB,EAAnB,IAAyB,CAA3C,IAAgDF,gBAAhD;AACA,UAAMX,gBAAMQ,QAAN,CAAe,EAAEC,KAAKV,KAAP,EAAf,CAAN;AACA,WAAOP,SAAP;AACD,GAVM,CAAP;AAWD,CAZD;;AAcA,MAAMsB,eAAe,MAAMxB,IAAN,IAAc;AACjC,QAAMS,QAAQ,MAAMC,gBAAMC,QAAN,CAAe,KAAf,CAApB;;AAEA,MAAIF,MAAMT,KAAKQ,KAAX,EAAkBiB,MAAlB,GAA2B,CAA/B,EAAkC;AAChChB,UAAMT,KAAKQ,KAAX,EAAkBkB,MAAlB,CAAyBJ,SAAStB,KAAKuB,GAAd,EAAmB,EAAnB,IAAyB,CAAlD,EAAqD,CAArD;AACD;;AAED,QAAMb,gBAAMQ,QAAN,CAAe,EAAEC,KAAKV,KAAP,EAAf,CAAN;AACD,CARD;;kBAUe;AACbV,WADa;AAEbyB,cAFa;AAGbJ;AAHa,C","file":"index.js","sourcesContent":["import { batch_list } from \"../../../Bot\";\nimport storage from \"node-persist\";\nimport Store from \"../../../Services/Store\";\n\nconst set_store = async data => {\n  return new Promise(async (resolve, reject) => {\n    if (!Object.keys(batch_list).includes(data.batch)) {\n      return reject(\"Not in a proper batch\");\n    }\n\n    let store = await Store.getStore(\"fep\");\n    if (store === undefined) {\n      store = { [data.batch]: [] };\n    }\n\n    const selected_user_data = [data.name, data.campus, data.room];\n    store[data.batch].push(selected_user_data);\n    await Store.setStore({ fep: store });\n    return resolve();\n  });\n};\n\nconst update_store = async data => {\n  return new Promise(async (resolve, reject) => {\n    if (!Object.keys(batch_list).includes(data.batch)) {\n      return reject(\"Not in a proper batch\");\n    }\n\n    const store = await Store.getStore(\"fep\");\n    const selectedUserData = [data.name, data.campus, data.room];\n    store[data.batch][parseInt(data.num, 10) - 1] = selectedUserData;\n    await Store.setStore({ fep: store });\n    return resolve();\n  });\n};\n\nconst delete_store = async data => {\n  const store = await Store.getStore(\"fep\");\n\n  if (store[data.batch].length > 0) {\n    store[data.batch].splice(parseInt(data.num, 10) - 1, 1);\n  }\n\n  await Store.setStore({ fep: store });\n};\n\nexport default {\n  set_store,\n  delete_store,\n  update_store\n};\n"]}