{"version":3,"sources":["../../../../src/Bot/Helper/CloudinaryUtils/index.js"],"names":["uploadQueue","upload","url","filename","Promise","resolve","reject","cloudinary","uploader","public_id","then","file","console","log","catch","err","warn","waitForAllUploads","type","limit","fileMeta","callback","ids","Object","keys","length","join"],"mappings":";;;;;;;;AAAA;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AAEA,MAAMA,cAAc,EAApB;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,MAAMC,SAAS,CAACC,GAAD,EAAMC,QAAN,KAAmB;AAChC,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCC,yBAAWC,QAAX,CAAoBP,MAApB,CAA2BC,GAA3B,EAAgC,EAACO,WAAWN,QAAZ,EAAhC,EAAuDO,IAAvD,CAA4DC,QAAQ;AAClEC,cAAQC,GAAR,CAAY,0BAAZ;AACAD,cAAQC,GAAR,CAAY,OAAOF,KAAKF,SAAxB;AACAG,cAAQC,GAAR,CAAY,OAAOF,KAAKT,GAAxB;AACAG,cAAQM,IAAR;AACD,KALD,EAKGG,KALH,CAKSC,OAAO;AACdH,cAAQC,GAAR,CAAY,0BAAZ;AACA,UAAIE,GAAJ,EAAS;AACPH,gBAAQI,IAAR,CAAaD,GAAb;AACAT,eAAOS,GAAP;AACD;AACF,KAXD;AAYD,GAbM,CAAP;AAcD,CAfD;;AAiBA,MAAME,oBAAoB,CAACC,IAAD,EAAOC,KAAP,EAAcC,QAAd,EAAwBC,QAAxB,KAAqC;AAC7DrB,cAAYkB,IAAZ,iBACKlB,YAAYkB,IAAZ,CADL,EAEKE,QAFL;AAIA,QAAME,MAAMC,OAAOC,IAAP,CAAYxB,YAAYkB,IAAZ,CAAZ,CAAZ;AACA,MAAII,IAAIG,MAAJ,KAAeN,KAAnB,EAA0B;AACxBP,YAAQC,GAAR,CAAY,6BAA6BS,IAAII,IAAJ,CAAS,GAAT,CAA7B,GAA6C,iBAAzD;AACAL;AACD;AACF,CAVD;;kBAYe,EAACpB,MAAD,EAASgB,iBAAT,E","file":"index.js","sourcesContent":["import {SharedProps} from \"../../../Bot\";\nimport storage from \"node-persist\";\nimport Store from \"../../../Services/Store\";\nimport FEPStoreCRUD from \"../../../Bot/Helper/FEPStoreCRUD\";\nimport cloudinary from \"cloudinary\";\nimport fs from \"fs-extra\";\nimport request from \"request\";\nimport cp from \"child_process\";\nimport path from \"path\";\n\nconst uploadQueue = {};\n\n// const upload = file => {\n//   return new Promise(resolve => {\n//     cloudinary.uploader.upload(file, result => {\n//       resolve({url: result.url, id: result.public_id});\n//     }, {resource_type: \"auto\"});\n//   });\n// };\n\nconst upload = (url, filename) => {\n  return new Promise((resolve, reject) => {\n    cloudinary.uploader.upload(url, {public_id: filename}).then(file => {\n      console.log(\"** File Upload (Promise)\");\n      console.log(\"* \" + file.public_id);\n      console.log(\"* \" + file.url);\n      resolve(file);\n    }).catch(err => {\n      console.log(\"** File Upload (Promise)\");\n      if (err) {\n        console.warn(err);\n        reject(err);\n      }\n    });\n  });\n};\n\nconst waitForAllUploads = (type, limit, fileMeta, callback) => {\n  uploadQueue[type] = {\n    ...uploadQueue[type],\n    ...fileMeta\n  };\n  const ids = Object.keys(uploadQueue[type]);\n  if (ids.length === limit) {\n    console.log(\"**  uploaded all files (\" + ids.join(\",\") + \") to cloudinary\");\n    callback();\n  }\n};\n\nexport default {upload, waitForAllUploads};\n"]}