{"version":3,"sources":["../../src/Bot/Bot.js"],"names":["line","shared_props","Bot","constructor","props","initProps","client","Client","config","Features","FEPList","StoreAdvance","Basic","Access","Template","Twibbon","Courses","PosetLattice","dialogFlow","handler","handlerBot","log","console","sourceIds","getId","event","source","Object","keys","map","type","origin","getProfile","Promise","resolve","reject","user","then","catch","val","timestamp","data","Store","getStore","undefined","push","setStore","propsLogs","setProps","id","key","groupId","roomId","userId","replyText","texts","Array","isArray","replyMessage","replyToken","text","sendMessage","message","msg","downloadContent","messageId","downloadPath","getMessageContent","stream","writeable","fs","createWriteStream","pipe","on"],"mappings":"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","file":"Bot.js","sourcesContent":["import Store from \"../Services/Store\";\nimport * as line from \"@line/bot-sdk\";\nimport {\n  FEPList,\n  StoreAdvance,\n  Basic,\n  Access,\n  Template,\n  Twibbon,\n  Courses,\n  PosetLattice\n} from \"./Features\";\nimport { dialogFlow } from \"./DialogFlow\";\nimport fs from \"fs-extra\";\nimport mkdirp from \"mkdirp\";\nimport path from \"path\";\nimport uuid from \"uuid\";\n\nimport config from \"../Config/Line\";\n\nimport { handlerBot } from \"./internal\";\n\n// share worker props by groupId\nexport const shared_props = {};\n// export const listener_stack = {\n//   postback: {}\n// };\n\n// class listener {\n//   constructor(Bot){\n//     this.Bot = Bot\n//     this.event = this.Bot.props.event\n//   }\n\n//   push(callback){\n//     listener_stack[this.Bot.getId().user] = callback\n//   }\n\n//   postback(stringObject, callback) {\n//     const data = JSON.parse(stringObject)\n//     return callback(listener_stack.postback[uuid.v4])\n//   }\n// }\n\nexport class Bot {\n  constructor(props) {\n    // console.log(shared_props)\n    // only access by? user, group, room, origin\n    this.props = this.initProps(props);\n    // console.log(this.props)\n\n    // create LINE SDK client\n    this.client = new line.Client(config);\n\n    // Features creator\n    this.Features = {\n      FEPList: FEPList(this),\n      StoreAdvance: StoreAdvance(this),\n      Basic: Basic(this),\n      Access: Access(this),\n      Template: Template(this),\n      Twibbon: Twibbon(this),\n      Courses: Courses(this),\n      PosetLattice: PosetLattice(this)\n    };\n\n    // DialogFlow assist\n    this.dialogFlow = new dialogFlow(this);\n\n    // Events listen assist\n    this.handler = new handlerBot(this);\n    this.log();\n    console.log(\"Bot instanced\");\n  }\n\n  initProps(props) {\n    const sourceIds = this.getId(props.event.source);\n\n    Object.keys(sourceIds).map(type => {\n      shared_props[sourceIds[type]] = {\n        ...shared_props[sourceIds[type]],\n        event: props.event\n      };\n    });\n\n    return shared_props[sourceIds.origin];\n  }\n\n  getProfile() {\n    return new Promise((resolve, reject) => {\n      this.client\n        .getProfile(this.getId().user)\n        .then(resolve)\n        .catch(reject);\n    });\n  }\n\n  log() {\n    new Promise(async (resolve, reject) => {\n      const val = { [this.props.event.timestamp]: this.props };\n      let data = await Store.getStore(\"propsLogs\");\n      if (data === undefined) {\n        data = [val];\n      } else {\n        data.push(val);\n      }\n      await Store.setStore({ propsLogs: data });\n      console.log(\"[LOG] Props logged\", this.props.event.timestamp);\n    });\n\n    // switch (this.props.event.source.type) {\n    // case 'user':\n    //     const { userId } = this.props.event.source\n    //     if (!log_chat['users'][userId]) {\n    //       log_chat['users'][userId] = []\n    //     }\n    //     log_chat['user'][userId].push(this.props.event)\n    //     return await Store.setStore({ log_chat: log_chat })\n    // case 'group':\n    //     const { groupId } = this.props.event.source\n    //     if (!log_chat['groups'][groupId]) {\n    //       log_chat['groups'][groupId] = []\n    //     }\n    //     log_chat['groups'][groupId].push(this.props.event)\n    //     return await Store.setStore({ log_chat: log_chat })\n    // }\n  }\n\n  setProps(data, id) {\n    console.log(data);\n    if (!id) id = this.getId().origin;\n\n    Object.keys(data).map(key => {\n      this.shared_props[id][key] = data[key];\n    });\n  }\n\n  getId(source) {\n    if (!source) source = this.props.event.source;\n    const type = {};\n\n    if (source.groupId) {\n      type[\"origin\"] = source.groupId;\n    } else {\n      if (source.roomId) {\n        type[\"origin\"] = source.roomId;\n      } else {\n        if (source.userId) {\n          type[\"origin\"] = source.userId;\n        }\n      }\n    }\n\n    if (source.groupId) {\n      type[\"group\"] = source.groupId;\n    }\n    if (source.roomId) {\n      type[\"room\"] = source.roomId;\n    }\n    if (source.userId) {\n      type[\"user\"] = source.userId;\n    }\n\n    if (type) return type;\n  }\n\n  replyText(texts) {\n    texts = Array.isArray(texts) ? texts : [texts];\n    return this.client.replyMessage(\n      this.props.event.replyToken,\n      texts.map(text => ({ type: \"text\", text }))\n    );\n  }\n\n  sendMessage(message) {\n    message = Array.isArray(message) ? message : [message];\n    return this.client.replyMessage(\n      this.props.event.replyToken,\n      message.map(msg => msg)\n    );\n  }\n\n  downloadContent(messageId, downloadPath) {\n    return this.client.getMessageContent(messageId).then(\n      stream =>\n        new Promise((resolve, reject) => {\n          const writeable = fs.createWriteStream(downloadPath);\n          stream.pipe(writeable);\n          stream.on(\"end\", () => resolve(downloadPath));\n          stream.on(\"error\", reject);\n        })\n    );\n  }\n}\n"]}