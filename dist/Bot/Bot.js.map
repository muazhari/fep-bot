{"version":3,"sources":["../../src/Bot/Bot.js"],"names":["line","shared_props","Bot","constructor","props","getId","bind","event","source","default","client","Client","config","Features","FEPList","StoreAdvance","Basic","Access","Template","DialogFlow","log","log_chat","Store","getStore","Object","keys","length","groups","users","setProps","data","id","console","map","key","Id","groupId","group","roomId","room","userId","user","replyText","texts","Array","isArray","replyMessage","replyToken","text","type","sendMessage","message","msg","downloadContent","messageId","downloadPath","getMessageContent","then","stream","Promise","resolve","reject","writeable","fs","createWriteStream","pipe","on"],"mappings":"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","file":"Bot.js","sourcesContent":["import Store from \"../Services/Store\";\nimport * as line from \"@line/bot-sdk\";\nimport { FEPList, StoreAdvance, Basic, Access, Template } from \"./Features\";\nimport { DialogFlow } from \"./DialogFlow\";\nimport fs from \"fs-extra\";\nimport mkdirp from \"mkdirp\";\nimport path from \"path\";\n\n// import { default_agent } from \"../Config/DialogFlow\";\n\nimport config from \"../Config/Line\";\n\n// share worker props by groupId\nexport const shared_props = {};\n\nexport class Bot {\n  constructor(props) {\n    this.getId = this.getId.bind(this);\n\n    shared_props[this.getId(props.event.source).default] = {\n      ...shared_props[this.getId(props.event.source).default],\n      event: props.event\n    };\n    // this.shared_props = shared_props\n    // console.log(shared_props)\n    // only access by? user, group, room, default\n    this.props = shared_props[this.getId(props.event.source).default];\n    // console.log(this.props)\n\n    // create LINE SDK client\n    this.client = new line.Client(config);\n\n    // Features creator\n    this.Features = {\n      FEPList: FEPList(this),\n      StoreAdvance: StoreAdvance(this),\n      Basic: Basic(this),\n      Access: Access(this),\n      Template: Template(this)\n    };\n\n    // DialogFlow assist\n    this.DialogFlow = new DialogFlow(this);\n  }\n\n  async log() {\n    let log_chat = await Store.getStore(\"log_chat\");\n    if (!log_chat || Object.keys(log_chat).length === 0) {\n      log_chat = {\n        groups: {},\n        users: {}\n      };\n    }\n\n    // switch (this.props.event.source.type) {\n    // case 'user':\n    //     const { userId } = this.props.event.source\n    //     if (!log_chat['users'][userId]) {\n    //       log_chat['users'][userId] = []\n    //     }\n    //     log_chat['user'][userId].push(this.props.event)\n    //     return await Store.setStore({ log_chat: log_chat })\n    // case 'group':\n    //     const { groupId } = this.props.event.source\n    //     if (!log_chat['groups'][groupId]) {\n    //       log_chat['groups'][groupId] = []\n    //     }\n    //     log_chat['groups'][groupId].push(this.props.event)\n    //     return await Store.setStore({ log_chat: log_chat })\n    // }\n  }\n\n  setProps(data, id) {\n    console.log(data);\n    if (!id) id = this.getId().default;\n\n    Object.keys(data).map(key => {\n      this.shared_props[id][key] = data[key];\n    });\n  }\n\n  getId(source) {\n    if (!source) source = this.props.event.source;\n    const Id = {};\n\n    if (source.groupId) {\n      Id[\"group\"] = source.groupId;\n      Id[\"default\"] = Id.group;\n    } else {\n      if (source.roomId) {\n        Id[\"room\"] = source.roomId;\n        Id[\"default\"] = Id.room;\n      } else {\n        if (source.userId) {\n          Id[\"user\"] = source.userId;\n          Id[\"default\"] = Id.user;\n        }\n      }\n    }\n\n    if (Id) return Id;\n  }\n\n  replyText(texts) {\n    texts = Array.isArray(texts) ? texts : [texts];\n    return this.client.replyMessage(\n      this.props.event.replyToken,\n      texts.map(text => ({ type: \"text\", text }))\n    );\n  }\n\n  sendMessage(message) {\n    message = Array.isArray(message) ? message : [message];\n    return this.client.replyMessage(\n      this.props.event.replyToken,\n      message.map(msg => msg)\n    );\n  }\n\n  downloadContent(messageId, downloadPath) {\n    return this.client.getMessageContent(messageId).then(\n      stream =>\n        new Promise((resolve, reject) => {\n          const writeable = fs.createWriteStream(downloadPath);\n          stream.pipe(writeable);\n          stream.on(\"end\", () => resolve(downloadPath));\n          stream.on(\"error\", reject);\n        })\n    );\n  }\n}\n"]}