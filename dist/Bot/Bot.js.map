{"version":3,"sources":["../../src/Bot/Bot.js"],"names":["line","shared_props","Bot","constructor","props","getId","bind","initProps","client","Client","config","Features","FEPList","StoreAdvance","Basic","Access","Template","Twibbon","Courses","PosetLattice","DialogFlow","sourceIds","event","source","Object","keys","map","type","dialogFlow","origin","profile","Promise","resolve","reject","getProfile","user","then","catch","log","Store","getStore","log_chat","length","groups","users","setProps","data","id","console","key","groupId","roomId","userId","replyText","texts","Array","isArray","replyMessage","replyToken","text","sendMessage","message","msg","downloadContent","messageId","downloadPath","getMessageContent","stream","writeable","fs","createWriteStream","pipe","on"],"mappings":"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","file":"Bot.js","sourcesContent":["import Store from \"../Services/Store\";\nimport * as line from \"@line/bot-sdk\";\nimport {\n  FEPList,\n  StoreAdvance,\n  Basic,\n  Access,\n  Template,\n  Twibbon,\n  Courses,\n  PosetLattice\n} from \"./Features\";\nimport {DialogFlow} from \"./DialogFlow\";\nimport fs from \"fs-extra\";\nimport mkdirp from \"mkdirp\";\nimport path from \"path\";\nimport uuid from \"uuid\";\n\nimport config from \"../Config/Line\";\n\n// share worker props by groupId\nexport const shared_props = {};\n// export const listener_stack = {\n//   postback: {}\n// };\n\n// class listener {\n//   constructor(Bot){\n//     this.Bot = Bot\n//     this.event = this.Bot.props.event\n//   }\n\n//   push(callback){\n//     listener_stack[this.Bot.getId().user] = callback\n//   }\n\n//   postback(stringObject, callback) {\n//     const data = JSON.parse(stringObject)\n//     return callback(listener_stack.postback[uuid.v4])\n//   }\n// }\n\nexport class Bot {\n  constructor(props) {\n    this.getId = this.getId.bind(this);\n    this.initProps = this.initProps.bind(this);\n\n    // this.shared_props = shared_props\n    // console.log(shared_props)\n    // only access by? user, group, room, origin\n    this.props = this.initProps(props);\n    // console.log(this.props)\n\n    // create LINE SDK client\n    this.client = new line.Client(config);\n\n    // Features creator\n    this.Features = {\n      FEPList: FEPList(this),\n      StoreAdvance: StoreAdvance(this),\n      Basic: Basic(this),\n      Access: Access(this),\n      Template: Template(this),\n      Twibbon: Twibbon(this),\n      Courses: Courses(this),\n      PosetLattice: PosetLattice(this)\n    };\n\n    // DialogFlow assist\n    this.DialogFlow = new DialogFlow(this);\n\n    // Events listen assist\n    // this.listener = new listener(this)\n  }\n\n  initProps(props) {\n    const sourceIds = this.getId(props.event.source);\n\n    Object.keys(sourceIds).map(type => {\n      shared_props[sourceIds[type]] = {\n        ...shared_props[sourceIds[type]],\n        event: props.event,\n        dialogFlow: { ...shared_props[sourceIds[type]].dialogFlow },\n      };\n    });\n\n    return shared_props[sourceIds.origin];\n  }\n\n  profile() {\n    return new Promise((resolve, reject) => {\n      this.client.getProfile(this.getId().user).then(resolve).catch(reject);\n    });\n  }\n\n  log() {\n    Store.getStore(\"log_chat\").then(log_chat => {\n      if (!log_chat || Object.keys(log_chat).length === 0) {\n        log_chat = {\n          groups: {},\n          users: {}\n        };\n      }\n\n      // switch (this.props.event.source.type) {\n      // case 'user':\n      //     const { userId } = this.props.event.source\n      //     if (!log_chat['users'][userId]) {\n      //       log_chat['users'][userId] = []\n      //     }\n      //     log_chat['user'][userId].push(this.props.event)\n      //     return await Store.setStore({ log_chat: log_chat })\n      // case 'group':\n      //     const { groupId } = this.props.event.source\n      //     if (!log_chat['groups'][groupId]) {\n      //       log_chat['groups'][groupId] = []\n      //     }\n      //     log_chat['groups'][groupId].push(this.props.event)\n      //     return await Store.setStore({ log_chat: log_chat })\n      // }\n    });\n  }\n\n  setProps(data, id) {\n    console.log(data);\n    if (!id) \n      id = this.getId().origin;\n    \n    Object.keys(data).map(key => {\n      this.shared_props[id][key] = data[key];\n    });\n  }\n\n  getId(source) {\n    if (!source) \n      source = this.props.event.source;\n    const type = {};\n\n    if (source.groupId) {\n      type[\"origin\"] = source.groupId;\n    } else {\n      if (source.roomId) {\n        type[\"origin\"] = source.roomId;\n      } else {\n        if (source.userId) {\n          type[\"origin\"] = source.userId;\n        }\n      }\n    }\n\n    if (source.groupId) {\n      type[\"group\"] = source.groupId;\n    }\n    if (source.roomId) {\n      type[\"room\"] = source.roomId;\n    }\n    if (source.userId) {\n      type[\"user\"] = source.userId;\n    }\n\n    if (type) \n      return type;\n    }\n  \n  replyText(texts) {\n    texts = Array.isArray(texts)\n      ? texts\n      : [texts];\n    return this.client.replyMessage(this.props.event.replyToken, texts.map(text => ({type: \"text\", text})));\n  }\n\n  sendMessage(message) {\n    message = Array.isArray(message)\n      ? message\n      : [message];\n    return this.client.replyMessage(this.props.event.replyToken, message.map(msg => msg));\n  }\n\n  downloadContent(messageId, downloadPath) {\n    return this.client.getMessageContent(messageId).then(stream => new Promise((resolve, reject) => {\n      const writeable = fs.createWriteStream(downloadPath);\n      stream.pipe(writeable);\n      stream.on(\"end\", () => resolve(downloadPath));\n      stream.on(\"error\", reject);\n    }));\n  }\n}\n"]}