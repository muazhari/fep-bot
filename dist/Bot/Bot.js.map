{"version":3,"sources":["../../src/Bot/Bot.js"],"names":["line","Bot","constructor","props","initProps","client","Client","lineKey","config","Features","FEPList","StoreAdvance","Basic","Access","Template","Twibbon","Courses","PosetLattice","dialogFlow","handler","handlerBot","SharedProps","log","getId","user","console","sourceIds","event","source","Object","keys","map","type","store","origin","getProfile","Promise","resolve","reject","then","catch","groupId","roomId","userId","replyText","texts","Array","isArray","replyMessage","replyToken","text","length","sendMessage","message","msg","downloadContent","messageId","downloadPath","getMessageContent","stream","writeable","fs","createWriteStream","pipe","on","err"],"mappings":"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","file":"Bot.js","sourcesContent":["import * as line from \"@line/bot-sdk\";\nimport {\n  FEPList,\n  StoreAdvance,\n  Basic,\n  Access,\n  Template,\n  Twibbon,\n  Courses,\n  PosetLattice\n} from \"./Features\";\nimport {dialogFlow} from \"./DialogFlow\";\nimport Store from \"../Services/Store\";\nimport fs from \"fs-extra\";\nimport mkdirp from \"mkdirp\";\nimport path from \"path\";\nimport uuid from \"uuid\";\n\nimport lineKey from \"../Config/Line\";\n\nimport {handlerBot, SharedProps} from \"../Bot\";\n\nimport Firebase from \"../Services/Firebase\";\n\n// share worker props by groupId\n// export const listener_stack = {\n//   postback: {}\n// };\n\n// class listener {\n//   constructor(Bot){\n//     this.Bot = Bot\n//     this.event = this.Bot.props.event\n//   }\n\n//   push(callback){\n//     listener_stack[this.Bot.getId().user] = callback\n//   }\n\n//   postback(stringObject, callback) {\n//     const data = JSON.parse(stringObject)\n//     return callback(listener_stack.postback[uuid.v4])\n//   }\n// }\n\nexport class Bot {\n  constructor(props) {\n    // console.log(SharedProps.store)\n    // only access by? user, group, room, origin\n    this.props = this.initProps(props);\n    // this.props = {\n    //   event: props\n    // };\n    // console.log(this.props)\n\n    // create LINE SDK client\n    this.client = new line.Client(lineKey.config);\n\n    //  Features creator\n    this.Features = {\n      FEPList: FEPList(this),\n      StoreAdvance: StoreAdvance(this),\n      Basic: Basic(this),\n      Access: Access(this),\n      Template: Template(this),\n      Twibbon: Twibbon(this),\n      Courses: Courses(this),\n      PosetLattice: PosetLattice(this)\n    };\n\n    //  DialogFlow assist\n    this.dialogFlow = new dialogFlow(this);\n\n    //  Events listen assist\n    this.handler = new handlerBot(this);\n    SharedProps.log(this.getId().user);\n    console.log(\"[Bot] Instanced\");\n  }\n\n  //should updated to implement firebase realtime database\n  initProps(props) {\n    const sourceIds = this.getId(props.event.source);\n\n    Object.keys(sourceIds).map(type => {\n      SharedProps.store[sourceIds[type]] = {\n        ...SharedProps.store[sourceIds[type]],\n        event: props.event\n      };\n    });\n\n    return SharedProps.store[sourceIds.origin];\n  }\n\n  getProfile() {\n    return new Promise((resolve, reject) => {\n      this.client.getProfile(this.getId().user).then(resolve).catch(reject);\n      console.log(\"[Bot] Got profile\");\n    });\n  }\n\n  getId(source) {\n    if (!source) \n      source = this.props.event.source;\n    const type = {};\n\n    if (source.groupId) {\n      type[\"origin\"] = source.groupId;\n    } else {\n      if (source.roomId) {\n        type[\"origin\"] = source.roomId;\n      } else {\n        if (source.userId) {\n          type[\"origin\"] = source.userId;\n        }\n      }\n    }\n\n    if (source.groupId) {\n      type[\"group\"] = source.groupId;\n    }\n    if (source.roomId) {\n      type[\"room\"] = source.roomId;\n    }\n    if (source.userId) {\n      type[\"user\"] = source.userId;\n    }\n\n    if (type) \n      return type;\n    }\n  \n  replyText(texts) {\n    texts = Array.isArray(texts)\n      ? texts\n      : [texts];\n    return this.client.replyMessage(this.props.event.replyToken, texts.map(text => {\n      console.log(\"[Bot] Sent Text, length: \", text.length);\n      return {type: \"text\", text};\n    }));\n  }\n\n  sendMessage(message) {\n    message = Array.isArray(message)\n      ? message\n      : [message];\n    return this.client.replyMessage(this.props.event.replyToken, message.map(msg => {\n      console.log(\"[Bot] Sent Message\");\n      return msg;\n    }));\n  }\n\n  downloadContent(messageId, downloadPath) {\n    return this.client.getMessageContent(messageId).then(stream => new Promise((resolve, reject) => {\n      const writeable = fs.createWriteStream(downloadPath);\n      stream.pipe(writeable);\n      stream.on(\"end\", () => {\n        console.log(\"[Bot] Content Successfuly Downloaded\", downloadPath);\n        resolve(downloadPath);\n      });\n      stream.on(\"error\", err => {\n        \n        reject(err);\n      });\n    }));\n  }\n}\n"]}