{"version":3,"sources":["../../src/Bot/Bot.js"],"names":["line","Bot","constructor","props","client","Client","config","Features","FEPList","StoreAdvance","Basic","Access","Template","DialogFlow","log","log_chat","Store","getStore","Object","keys","length","groups","users","replyText","texts","Array","isArray","replyMessage","event","replyToken","map","text","type","sendMessage","message","msg","downloadContent","messageId","downloadPath","getMessageContent","then","stream","Promise","resolve","reject","writeable","fs","createWriteStream","pipe","on"],"mappings":";;;;;;;AAAA;;;;AACA;;IAAYA,I;;AACZ;;AAQA;;;;AACA;;;;AACA;;;;AAGA;;;;;;;;AAEO,MAAMC,GAAN,CAAU;AACf;AACAC,cAAYC,KAAZ,EAAmB;AACjB,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKC,MAAL,GAAc,IAAIJ,KAAKK,MAAT,CAAgBC,cAAhB,CAAd;;AAEA;AACA,SAAKC,QAAL,GAAgB;AACdC,eAAS,uBAAQ,IAAR,CADK;AAEdC,oBAAc,4BAAa,IAAb,CAFA;AAGdC,aAAO,qBAAM,IAAN,CAHO;AAIdC,cAAQ,sBAAO,IAAP,CAJM;AAKdC,gBAAU,wBAAS,IAAT;AALI,KAAhB;;AAQA;AACA,SAAKC,UAAL,GAAkB,0BAAW,IAAX,CAAlB;AACD;;AAED,QAAMC,GAAN,GAAY;AACV,QAAIC,WAAW,MAAMC,gBAAMC,QAAN,CAAe,UAAf,CAArB;AACA,QAAI,CAACF,QAAD,IAAaG,OAAOC,IAAP,CAAYJ,QAAZ,EAAsBK,MAAtB,KAAiC,CAAlD,EAAqD;AACnDL,iBAAW;AACTM,gBAAQ,EADC;AAETC,eAAO;AAFE,OAAX;AAID;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDC,YAAUC,KAAV,EAAiB;AACfA,YAAQC,MAAMC,OAAN,CAAcF,KAAd,IAAuBA,KAAvB,GAA+B,CAACA,KAAD,CAAvC;AACA,WAAO,KAAKpB,MAAL,CAAYuB,YAAZ,CACL,KAAKxB,KAAL,CAAWyB,KAAX,CAAiBC,UADZ,EAELL,MAAMM,GAAN,CAAUC,SAAS,EAAEC,MAAM,MAAR,EAAgBD,IAAhB,EAAT,CAAV,CAFK,CAAP;AAID;;AAEDE,cAAYC,OAAZ,EAAqB;AACnBA,cAAUT,MAAMC,OAAN,CAAcQ,OAAd,IAAyBA,OAAzB,GAAmC,CAACA,OAAD,CAA7C;AACA,WAAO,KAAK9B,MAAL,CAAYuB,YAAZ,CACL,KAAKxB,KAAL,CAAWyB,KAAX,CAAiBC,UADZ,EAELK,QAAQJ,GAAR,CAAYK,OAAOA,GAAnB,CAFK,CAAP;AAID;;AAEDC,kBAAgBC,SAAhB,EAA2BC,YAA3B,EAAyC;AACvC,WAAO,KAAKlC,MAAL,CAAYmC,iBAAZ,CAA8BF,SAA9B,EAAyCG,IAAzC,CACLC,UACE,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,YAAMC,YAAYC,kBAAGC,iBAAH,CAAqBT,YAArB,CAAlB;AACAG,aAAOO,IAAP,CAAYH,SAAZ;AACAJ,aAAOQ,EAAP,CAAU,KAAV,EAAiB,MAAMN,QAAQL,YAAR,CAAvB;AACAG,aAAOQ,EAAP,CAAU,OAAV,EAAmBL,MAAnB;AACD,KALD,CAFG,CAAP;AASD;AAxEc;QAAJ3C,G,GAAAA,G;;AAHb","file":"Bot.js","sourcesContent":["import Store from \"../Services/Store\";\nimport * as line from \"@line/bot-sdk\";\nimport {\n  FEPList,\n  StoreAdvance,\n  Basic,\n  Access,\n  Template,\n  DialogFlow\n} from \"./internal\";\nimport fs from \"fs-extra\";\nimport mkdirp from \"mkdirp\";\nimport path from \"path\";\n\n// import DialogFlow from \"./DialogFlow/DialogFlow\"\nimport config from \"../Config/Line\";\n\nexport class Bot {\n  // create LINE SDK client\n  constructor(props) {\n    this.props = props;\n    this.client = new line.Client(config);\n\n    // Features creator\n    this.Features = {\n      FEPList: FEPList(this),\n      StoreAdvance: StoreAdvance(this),\n      Basic: Basic(this),\n      Access: Access(this),\n      Template: Template(this)\n    };\n\n    // DialogFlow assist\n    this.DialogFlow = DialogFlow(this);\n  }\n\n  async log() {\n    let log_chat = await Store.getStore(\"log_chat\");\n    if (!log_chat || Object.keys(log_chat).length === 0) {\n      log_chat = {\n        groups: {},\n        users: {}\n      };\n    }\n\n    // switch (this.props.event.source.type) {\n    // case 'user':\n    //     const { userId } = this.props.event.source\n    //     if (!log_chat['users'][userId]) {\n    //       log_chat['users'][userId] = []\n    //     }\n    //     log_chat['user'][userId].push(this.props.event)\n    //     return await Store.setStore({ log_chat: log_chat })\n    // case 'group':\n    //     const { groupId } = this.props.event.source\n    //     if (!log_chat['groups'][groupId]) {\n    //       log_chat['groups'][groupId] = []\n    //     }\n    //     log_chat['groups'][groupId].push(this.props.event)\n    //     return await Store.setStore({ log_chat: log_chat })\n    // }\n  }\n\n  replyText(texts) {\n    texts = Array.isArray(texts) ? texts : [texts];\n    return this.client.replyMessage(\n      this.props.event.replyToken,\n      texts.map(text => ({ type: \"text\", text }))\n    );\n  }\n\n  sendMessage(message) {\n    message = Array.isArray(message) ? message : [message];\n    return this.client.replyMessage(\n      this.props.event.replyToken,\n      message.map(msg => msg)\n    );\n  }\n\n  downloadContent(messageId, downloadPath) {\n    return this.client.getMessageContent(messageId).then(\n      stream =>\n        new Promise((resolve, reject) => {\n          const writeable = fs.createWriteStream(downloadPath);\n          stream.pipe(writeable);\n          stream.on(\"end\", () => resolve(downloadPath));\n          stream.on(\"error\", reject);\n        })\n    );\n  }\n}\n"]}