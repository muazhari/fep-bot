{"version":3,"sources":["../../src/Bot/Bot.js"],"names":["line","Bot","constructor","props","initProps","client","Client","config","Features","FEPList","StoreAdvance","Basic","Access","Template","Twibbon","Courses","PosetLattice","dialogFlow","handler","handlerBot","log","console","sourceIds","getId","event","source","Object","keys","map","type","SharedProps","store","origin","getProfile","Promise","resolve","reject","user","then","catch","val","timestamp","Firebase","fdb","collection","add","setProps","data","id","key","groupId","roomId","userId","replyText","texts","Array","isArray","replyMessage","replyToken","text","sendMessage","message","msg","length","downloadContent","messageId","downloadPath","getMessageContent","stream","writeable","fs","createWriteStream","pipe","on"],"mappings":"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","file":"Bot.js","sourcesContent":["import Store from \"../Services/Store\";\nimport * as line from \"@line/bot-sdk\";\nimport {\n  FEPList,\n  StoreAdvance,\n  Basic,\n  Access,\n  Template,\n  Twibbon,\n  Courses,\n  PosetLattice\n} from \"./Features\";\nimport {dialogFlow} from \"./DialogFlow\";\nimport fs from \"fs-extra\";\nimport mkdirp from \"mkdirp\";\nimport path from \"path\";\nimport uuid from \"uuid\";\n\nimport config from \"../Config/Line\";\n\nimport {handlerBot, SharedProps} from \"../Bot\";\n\nimport Firebase from \"../Services/Firebase\";\n\n// share worker props by groupId\n// export const listener_stack = {\n//   postback: {}\n// };\n\n// class listener {\n//   constructor(Bot){\n//     this.Bot = Bot\n//     this.event = this.Bot.props.event\n//   }\n\n//   push(callback){\n//     listener_stack[this.Bot.getId().user] = callback\n//   }\n\n//   postback(stringObject, callback) {\n//     const data = JSON.parse(stringObject)\n//     return callback(listener_stack.postback[uuid.v4])\n//   }\n// }\n\nexport class Bot {\n  constructor(props) {\n    // console.log(SharedProps.store)\n    // only access by? user, group, room, origin\n    this.props = this.initProps(props);\n    // console.log(this.props)\n\n    // create LINE SDK client\n    this.client = new line.Client(config);\n\n    // Features creator\n    this.Features = {\n      FEPList: FEPList(this),\n      StoreAdvance: StoreAdvance(this),\n      Basic: Basic(this),\n      Access: Access(this),\n      Template: Template(this),\n      Twibbon: Twibbon(this),\n      Courses: Courses(this),\n      PosetLattice: PosetLattice(this)\n    };\n\n    // DialogFlow assist\n    this.dialogFlow = new dialogFlow(this);\n\n    // Events listen assist\n    this.handler = new handlerBot(this);\n    this.log();\n    console.log(\"Bot instanced\");\n  }\n\n  //should updated to implement firebase realtime database\n  initProps(props) {\n    const sourceIds = this.getId(props.event.source);\n\n    Object.keys(sourceIds).map(type => {\n      SharedProps.store[sourceIds[type]] = {\n        ...SharedProps.store[sourceIds[type]],\n        event: props.event\n      };\n    });\n\n    return SharedProps.store[sourceIds.origin];\n  }\n\n  getProfile() {\n    return new Promise((resolve, reject) => {\n      this.client.getProfile(this.getId().user).then(resolve).catch(reject);\n    });\n  }\n\n  log() {\n    new Promise(async (resolve, reject) => {\n      const val = {\n        [this.props.event.timestamp]: this.props\n      };\n      // let data = await Store.getStore(\"propsLogs\");\n      // if (data === undefined) {\n      //   data = [val];\n      // } else {\n      //   data.push(val);\n      // }\n      // await Store.setStore(val);\n      Firebase.fdb.collection(\"Props\").add(this.props);\n      console.log(\"[LOG] Props logged\", this.props.event.timestamp);\n    });\n\n    // switch (this.props.event.source.type) {\n    // case 'user':\n    //     const { userId } = this.props.event.source\n    //     if (!log_chat['users'][userId]) {\n    //       log_chat['users'][userId] = []\n    //     }\n    //     log_chat['user'][userId].push(this.props.event)\n    //     return await Store.setStore({ log_chat: log_chat })\n    // case 'group':\n    //     const { groupId } = this.props.event.source\n    //     if (!log_chat['groups'][groupId]) {\n    //       log_chat['groups'][groupId] = []\n    //     }\n    //     log_chat['groups'][groupId].push(this.props.event)\n    //     return await Store.setStore({ log_chat: log_chat })\n    // }\n  }\n\n  setProps(data, id) {\n    console.log(data);\n    if (!id) \n      id = this.getId().origin;\n    \n    Object.keys(data).map(key => {\n      this.SharedProps.store[id][key] = data[key];\n    });\n  }\n\n  getId(source) {\n    if (!source) \n      source = this.props.event.source;\n    const type = {};\n\n    if (source.groupId) {\n      type[\"origin\"] = source.groupId;\n    } else {\n      if (source.roomId) {\n        type[\"origin\"] = source.roomId;\n      } else {\n        if (source.userId) {\n          type[\"origin\"] = source.userId;\n        }\n      }\n    }\n\n    if (source.groupId) {\n      type[\"group\"] = source.groupId;\n    }\n    if (source.roomId) {\n      type[\"room\"] = source.roomId;\n    }\n    if (source.userId) {\n      type[\"user\"] = source.userId;\n    }\n\n    if (type) \n      return type;\n    }\n  \n  replyText(texts) {\n    texts = Array.isArray(texts)\n      ? texts\n      : [texts];\n    return this.client.replyMessage(this.props.event.replyToken, texts.map(text => ({type: \"text\", text})));\n  }\n\n  sendMessage(message) {\n    message = Array.isArray(message)\n      ? message\n      : [message];\n    return this.client.replyMessage(this.props.event.replyToken, message.map(msg => {\n      console.log(\"Message length\", msg.length);\n      return msg;\n    }));\n  }\n\n  downloadContent(messageId, downloadPath) {\n    return this.client.getMessageContent(messageId).then(stream => new Promise((resolve, reject) => {\n      const writeable = fs.createWriteStream(downloadPath);\n      stream.pipe(writeable);\n      stream.on(\"end\", () => resolve(downloadPath));\n      stream.on(\"error\", reject);\n    }));\n  }\n}\n"]}