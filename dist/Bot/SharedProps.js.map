{"version":3,"sources":["../../src/Bot/SharedProps.js"],"names":["isObject","item","Array","isArray","merge","oldObj","newObj","key","SharedPropsFactory","constructor","store","set","log","sourceId","Promise","resolve","reject","Firebase","fdb","collection","add","console","Date","storeUpdateListener","rdb","ref","SharedProps"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;AAEA;;;;AACA;;;;;;AAEA,MAAMA,WAAYC,IAAD,IAAU;AACzB,SAAQA,QAAQ,OAAOA,IAAP,KAAgB,QAAxB,IAAoC,CAACC,MAAMC,OAAN,CAAcF,IAAd,CAArC,IAA4DA,SAAS,IAA7E;AACD,CAFD;;AAIA,MAAMG,QAAQ,CAACC,MAAD,EAASC,MAAT,KAAoB;AAChC,MAAIN,SAASK,MAAT,KAAoBL,SAASM,MAAT,CAAxB,EAA0C;AACxC,SAAK,MAAMC,GAAX,IAAkBD,MAAlB,EAA0B;AACxB,UAAIN,SAASM,OAAOC,GAAP,CAAT,CAAJ,EAA2B;AACzB,YAAI,CAACF,OAAOE,GAAP,CAAL,EAAkB;AAChBF,iBAAOE,GAAP,IAAc,EAAd;AACD;AACDH,cAAMC,OAAOE,GAAP,CAAN,EAAmBD,OAAOC,GAAP,CAAnB;AACD,OALD,MAKO;AACLF,eAAOE,GAAP,IAAcD,OAAOC,GAAP,CAAd;AACD;AACF;AACF;AACD,SAAOF,MAAP;AACD,CAdD;;AAgBA,MAAMG,kBAAN,CAAyB;AACvBC,gBAAc;AACZ,SAAKC,KAAL,GAAa,EAAb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDC,MAAIL,MAAJ,EAAY;AACV,SAAKI,KAAL,GAAaN,MAAM,KAAKM,KAAX,EAAkBJ,MAAlB,CAAb;AACD;;AAEDM,MAAIC,QAAJ,EAAc;AACZ,QAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AAC/B,UAAIH,QAAJ,EAAc;AACZI,2BAASC,GAAT,CAAaC,UAAb,CAAwB,OAAxB,EAAiCC,GAAjC,CAAqC,KAAKV,KAAL,CAAWG,QAAX,CAArC;AACAQ,gBAAQT,GAAR,CAAY,4BAAZ,EAA0CC,QAA1C,EAAoD,IAAIS,IAAJ,EAApD;AACD;AACDL,yBAASC,GAAT,CAAaC,UAAb,CAAwB,OAAxB,EAAiCC,GAAjC,CAAqC,KAAKV,KAA1C;AACAW,cAAQT,GAAR,CAAY,4BAAZ,EAA0C,IAAIU,IAAJ,EAA1C;AACD,KAPD;AAQD;;AAEDC,wBAAsB;AACpBN,uBAASO,GAAT,CAAaC,GAAb,CAAiB,aAAjB,EAAgCd,GAAhC,CAAoC,KAAKD,KAAzC;AACAW,YAAQT,GAAR,CAAY,6BAAZ,EAA2C,IAAIU,IAAJ,EAA3C;AACD;AA/BsB;;AAkCzB,MAAMI,cAAc,IAAIlB,kBAAJ,EAApB;;QAGEkB,W,GAAAA,W","file":"SharedProps.js","sourcesContent":["import Store from \"../Services/Store\";\nimport fs from \"fs-extra\";\nimport mkdirp from \"mkdirp\";\nimport path from \"path\";\nimport uuid from \"uuid\";\n\nimport config from \"../Config/Line\";\n\nimport Firebase from \"../Services/Firebase\";\nimport observe from \"observe\";\n\nconst isObject = (item) => {\n  return (item && typeof item === 'object' && !Array.isArray(item) && item !== null);\n}\n\nconst merge = (oldObj, newObj) => {\n  if (isObject(oldObj) && isObject(newObj)) {\n    for (const key in newObj) {\n      if (isObject(newObj[key])) {\n        if (!oldObj[key]) {\n          oldObj[key] = {};\n        }\n        merge(oldObj[key], newObj[key]);\n      } else {\n        oldObj[key] = newObj[key];\n      }\n    }\n  }\n  return oldObj;\n};\n\nclass SharedPropsFactory {\n  constructor() {\n    this.store = {};\n    // this.store = observe({});\n    // this.store = new Proxy({}, {\n    //   set: this._set,\n    //   get: this._get\n    // });\n    // this.store.on(\"change\", change => {\n    //   this.storeUpdateListener();\n    // });\n  }\n\n  set(newObj) {\n    this.store = merge(this.store, newObj);\n  }\n\n  log(sourceId) {\n    new Promise((resolve, reject) => {\n      if (sourceId) {\n        Firebase.fdb.collection(\"Props\").add(this.store[sourceId]);\n        console.log(\"[SharedProps] Props logged\", sourceId, new Date());\n      }\n      Firebase.fdb.collection(\"Store\").add(this.store);\n      console.log(\"[SharedProps] Store logged\", new Date());\n    });\n  }\n\n  storeUpdateListener() {\n    Firebase.rdb.ref(\"SharedProps\").set(this.store);\n    console.log(\"[SharedProps] Store updated\", new Date());\n  }\n}\n\nconst SharedProps = new SharedPropsFactory();\n\nexport {\n  SharedProps\n};"]}