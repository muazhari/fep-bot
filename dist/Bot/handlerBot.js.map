{"version":3,"sources":["../../src/Bot/handlerBot.js"],"names":["baseURL","process","env","BASE_URL","batch_list","a","b","c","d","e","command_prefix","destructCommand","chat","prefix","command","slice","length","args","map","item","trim","console","log","handleCommand","features","FEPList","StoreAdvance","Basic","Template","Twibbon","Courses","PosetLattice","commandList","add","upd","update","rem","remove","view","rstore","reset_store","pstore","pre_store","bstore","backup_store","admin","help","button","profile","confirm","bifest","greet","say","twibbon","ready","algo","pl","generate","binushack","test","content_prefix","content_command","content_args","Object","keys","includes","userQueue","userId","queue","increment","decrement","handlerBot","constructor","Bot","Features","eventListener","props","event","type","message","handleText","handleImage","handleVideo","handleAudio","handleLocation","handleSticker","Error","JSON","stringify","client","getProfile","joined","members","then","replyText","displayName","source","data","postback","params","objectData","parse","listenPostback","beacon","replyToken","splittedChat","text","split","isTextCommand","dialogFlow","listen","getContent","imageData","originalContentPath","path","join","__dirname","id","previewPath","originalContentUrl","previewImageUrl","contentProvider","downloadContent","cp","execSync","catch","err","listenStatus","listenImage","fs","unlinkSync","imageLogData","Promise","resolve","videoData","videoLogData","CloudinaryUtils","upload","audioData","audioLogData","sendMessage","title","address","latitude","longitude"],"mappings":"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","file":"handlerBot.js","sourcesContent":["import fs from \"fs-extra\";\nimport path from \"path\";\nimport cp from \"child_process\";\nimport { SharedProps } from \"../Bot\";\nimport CloudinaryUtils from \"../Bot/Helper/CloudinaryUtils\";\n\n// base URL for webhook server\nexport const baseURL = process.env.BASE_URL;\n\nexport const batch_list = {\n  a: \"22 - 27 JULI 2019\",\n  b: \"29 JULI - 3 AGUSTUS 2019\",\n  c: \"5 - 10 AGUSTUS 2019\",\n  d: \"19 - 24 AGUSTUS 2019\",\n  e: \"26 - 03 SEPTEMBER 2019\"\n};\n\nexport const command_prefix = \"/\";\n\nconst destructCommand = chat => {\n  const prefix = chat[0][0];\n  const command = chat[0].slice(1, chat[0].length);\n  const args = chat.slice(1, chat.length).map(item => item.trim());\n\n  console.log(\"[HandlerBot] Command destructed\", { prefix, command, args });\n  return { prefix, command, args };\n};\n\nconst handleCommand = (features, command) => {\n  const {\n    FEPList,\n    StoreAdvance,\n    Basic,\n    Template,\n    Twibbon,\n    Courses,\n    PosetLattice\n  } = features;\n\n  const commandList = {\n    add: FEPList.add,\n    upd: FEPList.update,\n    rem: FEPList.remove,\n    view: FEPList.view,\n    rstore: StoreAdvance.reset_store,\n    pstore: StoreAdvance.pre_store,\n    bstore: StoreAdvance.backup_store,\n    \"]]\": Basic.admin,\n    help: Basic.help,\n    button: Template.button,\n    profile: Basic.profile,\n    confirm: Template.confirm,\n    bifest: Template.bifest,\n    greet: Basic.greet,\n    say: Basic.say,\n    twibbon: Twibbon.ready,\n    algo: Courses.algo,\n    pl: PosetLattice.generate,\n    binushack: Template.binushack,\n    test: Template.test\n  };\n\n  const {\n    prefix: content_prefix,\n    command: content_command,\n    args: content_args\n  } = destructCommand(command);\n\n  if (Object.keys(commandList).includes(content_command)) {\n    if (commandList[content_command].length >= 1) {\n      commandList[content_command](content_args);\n    } else {\n      commandList[content_command]();\n    }\n  }\n};\n\nconst userQueue = userId => {\n  const queue = {};\n\n  const increment = () => {\n    if (!queue[userId]) {\n      queue[userId] = 0;\n    }\n    queue[userId] += 1;\n  };\n\n  const decrement = () => {\n    if (!queue[userId]) {\n      queue[userId] = 0;\n    }\n    if (queue[userId] >= 1) {\n      queue[userId] -= 1;\n    }\n  };\n\n  return { increment, decrement };\n};\n\nexport class handlerBot {\n  constructor(Bot) {\n    this.Bot = Bot;\n    this.features = Bot.Features;\n    this.eventListener(Bot.props.event);\n  }\n\n  eventListener(event) {\n    console.log(\"[HandlerBot] Event:\", event);\n    // hidden error, need fix\n    // const this.Bot = new Bot({ event });\n    // this.Bot.log()\n\n    // const whitelist = this.Bot.Features.Access.whitelist();\n    // console.log(whitelist);\n    // const type = whitelist.user || whitelist.room ? event.type : null;\n\n    switch (event.type) {\n      case \"message\":\n        const { message } = event;\n        switch (message.type) {\n          case \"text\":\n            return this.handleText();\n          case \"image\":\n            return this.handleImage();\n          case \"video\":\n            return this.handleVideo();\n          case \"audio\":\n            return this.handleAudio();\n          case \"location\":\n            return this.handleLocation();\n          case \"sticker\":\n            return this.handleSticker();\n          default:\n            throw new Error(`Unknown message: ${JSON.stringify(message)}`);\n        }\n\n      case \"memberJoined\":\n        return this.Bot.client\n          .getProfile(event.joined.members[0].userId)\n          .then(profile => {\n            this.Bot.replyText(\n              `Welcome ${profile.displayName}! Jangan lupa cek notes di group ya!`\n            );\n          });\n\n      case \"follow\":\n        return this.Bot.replyText(\"Got followed event\");\n\n      case \"unfollow\":\n        return console.log(\n          `[HandlerBot] Unfollowed this bot: ${JSON.stringify(event)}`\n        );\n\n      case \"join\":\n        return this.Bot.replyText(`Joined ${event.source.type}`);\n\n      case \"leave\":\n        return console.log(`[HandlerBot] Left: ${JSON.stringify(event)}`);\n\n      case \"postback\":\n        let { data } = event.postback;\n        if (data === \"DATE\" || data === \"TIME\" || data === \"DATETIME\") {\n          data += `(${JSON.stringify(event.postback.params)})`;\n        }\n\n        const objectData = JSON.parse(data);\n\n        const { Twibbon } = this.Bot.Features;\n        console.log(\"[HandlerBot] Postback listened\", objectData);\n        Twibbon.listenPostback(objectData);\n\n        break;\n\n      case \"beacon\":\n        return this.Bot.replyText(`Got beacon: ${event.beacon}`);\n\n      default:\n        throw new Error(`[HandlerBot] Unknown event: ${JSON.stringify(event)}`);\n    }\n  }\n\n  handleText() {\n    const { message, replyToken, source } = this.Bot.props.event;\n\n    // The text query request.\n    const splittedChat = message.text.split(\" \");\n    const isTextCommand = splittedChat[0][0] === command_prefix;\n    if (isTextCommand) {\n      handleCommand(this.Bot.Features, splittedChat);\n    } else {\n      // hidden error, need fix\n      this.Bot.dialogFlow.listen();\n    }\n  }\n\n  handleImage() {\n    const { message, replyToken } = this.Bot.props.event;\n    let getContent;\n\n    const imageData = {\n      originalContentPath: path.join(\n        __dirname,\n        \"../../assets/downloaded/images\",\n        `${message.id}.jpg`\n      ),\n      previewPath: path.join(\n        __dirname,\n        \"../../assets/downloaded/images\",\n        `${message.id}-preview.jpg`\n      ),\n      originalContentUrl: `${baseURL}/downloaded/images/${message.id}.jpg`,\n      previewImageUrl: `${baseURL}/downloaded/images/${message.id}.jpg`\n    };\n\n    // const imageLogData = {\n    //   originalContentPath: path.join(\n    //     __dirname,\n    //     \"../../assets/downloaded/images\",\n    //     `${message.id}-log.jpg`\n    //   ),\n    //   originalContentUrl: `${baseURL}/downloaded/images/${message.id}-log.jpg`\n    // };\n\n    // this.Bot.downloadContent(message.id, imageLogData.originalContentPath).then(\n    //   () => {\n    //     CloudinaryUtils.upload(\n    //       imageLogData.originalContentUrl,\n    //       `logs:images:${message.id}`\n    //     )\n    //       .then(() => {\n    //         fs.unlinkSync(imageLogData.originalContentPath);\n    //         console.log(\n    //           \"[HandlerBot] Image log success\",\n    //           imageLogData.originalContentPath\n    //         );\n    //       })\n    //       .catch(err => {\n    //         console.log(\n    //           \"[HandlerBot] Image log failed\",\n    //           imageLogData.originalContentPath\n    //         );\n    //       });\n    //   }\n    // );\n\n    if (message.contentProvider.type === \"line\") {\n      getContent = () => {\n        return this.Bot.downloadContent(\n          message.id,\n          imageData.originalContentPath\n        )\n          .then(() => {\n            cp.execSync(\n              `convert -resize 240x jpg:${imageData.originalContentPath} jpg:${imageData.previewPath}`\n            );\n            return imageData;\n          })\n          .catch(err => {\n            throw err;\n          });\n      };\n\n      // Twibbon switch\n      let listenStatus = true;\n      const { Twibbon } = this.Bot.Features;\n      listenStatus = Twibbon.listenImage(getContent);\n\n      if (!listenStatus) {\n        fs.unlinkSync(imageData.originalContentPath);\n        fs.unlinkSync(imageData.previewPath);\n        console.log(\n          \"[HandlerBot] Image listen status verdict is unused\",\n          imageLogData.originalContentPath\n        );\n      } else {\n        console.log(\n          \"[HandlerBot] Image listen status verdict is used\",\n          imageLogData.originalContentPath\n        );\n      }\n\n    } else if (message.contentProvider.type === \"external\") {\n      getContent = () => {\n        return Promise.resolve(message.contentProvider);\n      };\n    }\n\n    return getContent.then(({ originalContentUrl, previewImageUrl }) => {\n      // this.Bot.sendMessage({\n      //   type: \"image\",\n      //   originalContentUrl: originalContentUrl,\n      //   previewImageUrl: previewImageUrl\n      // });\n    });\n  }\n\n  handleVideo() {\n    const { message, replyToken } = this.Bot.props.event;\n    let getContent;\n\n    const videoData = {\n      originalContentPath: path.join(\n        __dirname,\n        \"../../assets/downloaded/videos\",\n        `${message.id}.mp4`\n      ),\n      previewPath: path.join(\n        __dirname,\n        \"../../assets/downloaded/videos\",\n        `${message.id}-preview.mp4`\n      ),\n      originalContentUrl: `${baseURL}/downloaded/videos/${message.id}.mp4`,\n      previewImageUrl: `${baseURL}/downloaded/videos/${message.id}.mp4`\n    };\n\n    const videoLogData = {\n      originalContentPath: path.join(\n        __dirname,\n        \"../../assets/downloaded/videos\",\n        `${message.id}-log.mp4`\n      ),\n      originalContentUrl: `${baseURL}/downloaded/videos/${message.id}-log.mp4`\n    };\n\n    this.Bot.downloadContent(message.id, videoLogData.originalContentPath).then(\n      () => {\n        CloudinaryUtils.upload(\n          videoLogData.originalContentUrl,\n          `logs/videos/${message.id}`\n        )\n          .then(() => {\n            fs.unlinkSync(videoLogData.originalContentPath);\n            console.log(\n              \"[HandlerBot] Video log success\",\n              videoLogData.originalContentPath\n            );\n          })\n          .catch(err => {\n            console.log(\n              \"[HandlerBot] Video log failed\",\n              videoLogData.originalContentPath\n            );\n          });\n      }\n    );\n\n    if (message.contentProvider.type === \"line\") {\n      // getContent = this.Bot.downloadContent(\n      //   message.id,\n      //   videoData.originalContentPath\n      // ).then(() => {\n      //   // FFmpeg and ImageMagick is needed here to run 'convert'\n      //   // Please consider about security and performance by yourself\n      //   cp.execSync(\n      //     `convert mp4:${videoData.originalContentPath} jpeg:${videoData.previewPath}`\n      //   );\n\n      //   return videoData;\n      // });\n    } else if (message.contentProvider.type === \"external\") {\n      getContent = () => {\n        return Promise.resolve(message.contentProvider);\n      };\n    }\n\n    return getContent.then(({ originalContentUrl, previewImageUrl }) => {\n      // this.Bot.sendMessage({\n      //   type: \"video\",\n      //   originalContentUrl,\n      //   previewImageUrl\n      // });\n    });\n  }\n\n  handleAudio() {\n    const { message, replyToken } = this.Bot.props.event;\n    let getContent;\n\n    const audioData = {\n      originalContentPath: path.join(\n        __dirname,\n        \"../../assets/downloaded/audios\",\n        `${message.id}.m4a`\n      ),\n      originalContentUrl: `${baseURL}/downloaded/audios/${message.id}.m4a`\n    };\n\n    const audioLogData = {\n      originalContentPath: path.join(\n        __dirname,\n        \"../../assets/downloaded/audios\",\n        `${message.id}-log.m4a`\n      ),\n      originalContentUrl: `${baseURL}/downloaded/audios/${message.id}-log.m4a`\n    };\n\n    this.Bot.downloadContent(message.id, audioLogData.originalContentPath).then(\n      () => {\n        CloudinaryUtils.upload(\n          audioLogData.originalContentUrl,\n          `logs/audios/${message.id}`\n        )\n          .then(() => {\n            fs.unlinkSync(audioLogData.originalContentPath);\n            console.log(\n              \"[HandlerBot] Audio log success\",\n              audioLogData.originalContentPath\n            );\n          })\n          .catch(err => {\n            console.log(\n              \"[HandlerBot] Audio log failed\",\n              audioLogData.originalContentPath\n            );\n          });\n      }\n    );\n    // \n\n    if (message.contentProvider.type === \"line\") {\n      // getContent = this.Bot.downloadContent(\n      //   message.id,\n      //   audioData.originalContentPath\n      // ).then(() => {\n      //   return audioData;\n      // });\n    } else {\n      getContent = () => {\n        return Promise.resolve(message.contentProvider);\n      };\n    }\n\n    return getContent.then(({ originalContentUrl }) => {\n      // this.Bot.sendMessage({\n      //   type: \"audio\",\n      //   originalContentUrl,\n      //   duration: message.duration\n      // });\n    });\n  }\n\n  handleLocation() {\n    const { message, replyToken } = this.Bot.props.event;\n    this.Bot.sendMessage({\n      type: \"location\",\n      title: message.title,\n      address: message.address,\n      latitude: message.latitude,\n      longitude: message.longitude\n    });\n  }\n\n  handleSticker() {\n    const { message, replyToken } = this.Bot.props.event;\n    // this.Bot.sendMessage({\n    //   type: \"sticker\",\n    //   packageId: message.packageId,\n    //   stickerId: message.stickerId\n    // });\n  }\n}\n"]}
