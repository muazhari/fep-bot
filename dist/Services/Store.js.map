{"version":3,"sources":["../../src/Services/Store.js"],"names":["initLogStoreage","storage","create","dir","stringify","JSON","parse","encoding","logging","ttl","expiredInterval","forgiveParseErrors","init","initLogStorage","setStore","obj","Object","keys","map","key","setItem","getStore","storeName","getItem","remStore","removeItem","updStore","value","updateItem"],"mappings":";;;;;;AAAA;;;;;;AAEA;AACA;;AAEA,MAAMA,kBAAkB,YAAW;AACjC,SAAMC,sBAAQC,MAAR,CAAe;AACnBC,WAAK,0BADc;;AAGnBC,iBAAWC,KAAKD,SAHG;;AAKnBE,aAAOD,KAAKC,KALO;;AAOnBC,gBAAU,MAPS;;AASnBC,eAAS,KATU,EASF;;AAEjBC,WAAK,KAXc,EAWP;;AAEZC,uBAAiB,IAAI,EAAJ,GAAS,IAbP,EAaa;;AAEhC;AACA;AACAC,0BAAoB;;AAjBD,IAAf,CAAN;AAoBD,CArBD;;AAuBA,MAAMC,OAAO,YAAY;AACvB,SAAMX,sBAAQW,IAAR,EAAN;AACA,SAAMC,gBAAN;AACD,CAHD;;AAKA,MAAMC,WAAW,MAAMC,GAAN,IAAa;AAC5B,SAAMC,OAAOC,IAAP,CAAYF,GAAZ,EAAiBG,GAAjB,CAAqB,MAAMC,GAAN,IAAa;AACtC,YAAMlB,sBAAQmB,OAAR,CAAgBD,GAAhB,EAAqBJ,IAAII,GAAJ,CAArB,CAAN;AACD,IAFK,CAAN;AAGD,CAJD;;AAMA,MAAME,WAAW,MAAMC,SAAN,IAAmB;AAClC,UAAO,MAAMrB,sBAAQsB,OAAR,CAAgBD,SAAhB,CAAb;AACD,CAFD;;AAIA,MAAME,WAAW,MAAMF,SAAN,IAAmB;AAClC,SAAMrB,sBAAQwB,UAAR,CAAmBH,SAAnB,CAAN;AACD,CAFD;;AAIA,MAAMI,WAAW,OAAOJ,SAAP,EAAkBK,KAAlB,KAA4B;AAC3C,SAAM1B,sBAAQ2B,UAAR,CAAmBN,SAAnB,EAA8BK,KAA9B,CAAN;AACD,CAFD;;kBAIe,EAACf,IAAD,EAAOE,QAAP,EAAiBO,QAAjB,EAA2BG,QAA3B,EAAqCE,QAArC,E","file":"Store.js","sourcesContent":["import storage from \"node-persist\";\n\n// share worker props by groupId\n// const shared_props = storage.create({});\n\nconst initLogStoreage = async () =>{\n  await storage.create({\n    dir: 'relative/path/to/persist',\n \n    stringify: JSON.stringify,\n \n    parse: JSON.parse,\n \n    encoding: 'utf8',\n \n    logging: false,  // can also be custom logging function\n \n    ttl: false, // ttl* [NEW], can be true for 24h default or a number in MILLISECONDS or a valid Javascript Date object\n \n    expiredInterval: 2 * 60 * 1000, // every 2 minutes the process will clean-up the expired cache\n \n    // in some cases, you (or some other service) might add non-valid storage files to your\n    // storage dir, i.e. Google Drive, make this true if you'd like to ignore these files and not throw an error\n    forgiveParseErrors: false\n \n});\n}\n\nconst init = async () => {\n  await storage.init();\n  await initLogStorage();\n};\n\nconst setStore = async obj => {\n  await Object.keys(obj).map(async key => {\n    await storage.setItem(key, obj[key]);\n  });\n};\n\nconst getStore = async storeName => {\n  return await storage.getItem(storeName);\n};\n\nconst remStore = async storeName => {\n  await storage.removeItem(storeName);\n};\n\nconst updStore = async (storeName, value) => {\n  await storage.updateItem(storeName, value);\n};\n\nexport default {init, setStore, getStore, remStore, updStore};\n"]}