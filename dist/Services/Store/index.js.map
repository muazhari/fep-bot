{"version":3,"sources":["../../../src/Services/Store/index.js"],"names":["init","storage","dir","path","join","__dirname","stringify","JSON","parse","encoding","logging","ttl","expiredInterval","forgiveParseErrors","setStore","obj","Object","keys","map","key","setItem","getStore","storeName","getItem","remStore","removeItem","updStore","value","updateItem"],"mappings":";;;;;;AAAA;;;;AACA;;;;;;AAEA;AACA;;AAEA,MAAMA,OAAO,YAAY;AACvB,QAAMC,sBAAQD,IAAR,CAAa;AACjBE,SAAKC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,mBAArB,CADY;AAEjBC,eAAWC,KAAKD,SAFC;AAGjBE,WAAOD,KAAKC,KAHK;AAIjBC,cAAU,MAJO;AAKjBC,aAAS,IALQ,EAKF;AACfC,SAAK,KANY,EAML;AACZC,qBAAiB,IAAI,EAAJ,GAAS,IAPT,EAOe;AAChC;AACA;AACAC,wBAAoB;AAVH,GAAb,CAAN;AAYD,CAbD;;AAeA,MAAMC,WAAW,MAAMC,GAAN,IAAa;AAC5BC,SAAOC,IAAP,CAAYF,GAAZ,EAAiBG,GAAjB,CAAqB,MAAMC,GAAN,IAAa;AAChC,UAAMlB,sBAAQmB,OAAR,CAAgBD,GAAhB,EAAqBJ,IAAII,GAAJ,CAArB,CAAN;AACD,GAFD;AAGD,CAJD;;AAMA,MAAME,WAAW,MAAMC,SAAN,IAAmB;AAClC,SAAO,MAAMrB,sBAAQsB,OAAR,CAAgBD,SAAhB,CAAb;AACD,CAFD;;AAIA,MAAME,WAAW,MAAMF,SAAN,IAAmB;AAClC,QAAMrB,sBAAQwB,UAAR,CAAmBH,SAAnB,CAAN;AACD,CAFD;;AAIA,MAAMI,WAAW,OAAOJ,SAAP,EAAkBK,KAAlB,KAA4B;AAC3C,QAAM1B,sBAAQ2B,UAAR,CAAmBN,SAAnB,EAA8BK,KAA9B,CAAN;AACD,CAFD;;kBAIe,EAAC3B,IAAD,EAAOc,QAAP,EAAiBO,QAAjB,EAA2BG,QAA3B,EAAqCE,QAArC,E","file":"index.js","sourcesContent":["import storage from \"node-persist\";\nimport path from \"path\";\n\n// share worker props by groupId\n// const shared_props = storage.create({});\n\nconst init = async () => {\n  await storage.init({\n    dir: path.join(__dirname, \"../../../src/Logs\"),\n    stringify: JSON.stringify,\n    parse: JSON.parse,\n    encoding: \"utf8\",\n    logging: true, // can also be custom logging function\n    ttl: false, // ttl* [NEW], can be true for 24h default or a number in MILLISECONDS or a valid Javascript Date object\n    expiredInterval: 2 * 60 * 1000, // every 2 minutes the process will clean-up the expired cache\n    // in some cases, you (or some other service) might add non-valid storage files to your\n    // storage dir, i.e. Google Drive, make this true if you'd like to ignore these files and not throw an error\n    forgiveParseErrors: false\n  });\n};\n\nconst setStore = async obj => {\n  Object.keys(obj).map(async key => {\n    await storage.setItem(key, obj[key]);\n  });\n};\n\nconst getStore = async storeName => {\n  return await storage.getItem(storeName);\n};\n\nconst remStore = async storeName => {\n  await storage.removeItem(storeName);\n};\n\nconst updStore = async (storeName, value) => {\n  await storage.updateItem(storeName, value);\n};\n\nexport default {init, setStore, getStore, remStore, updStore};\n"]}