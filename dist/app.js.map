{"version":3,"sources":["../src/app.js"],"names":["line","cloudinary","config","cloudinary_config","exports","uploads","file","Promise","resolve","uploader","upload","result","url","id","public_id","resource_type","Store","init","app","disable","set","path","join","__dirname","use","skip","get","express","static","middleware","line_config","bodyParser","json","urlencoded","extended","routes","err","req","res","next","SignatureValidationFailed","status","send","signature","JSONParseError","raw","Error","render","message"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;IAAYA,I;;AAEZ;;;;AACA;;;;AAYA;;;;;;;;AAVAC,qBAAWC,MAAX,CAAkBC,oBAAlB;;AAEAC,QAAQC,OAAR,GAAkBC,QAAQ;AACxB,SAAO,IAAIC,OAAJ,CAAYC,WAAW;AAC5BP,yBAAWQ,QAAX,CAAoBC,MAApB,CAA2BJ,IAA3B,EAAiCK,UAAU;AACzCH,cAAQ,EAACI,KAAKD,OAAOC,GAAb,EAAkBC,IAAIF,OAAOG,SAA7B,EAAR;AACD,KAFD,EAEG,EAACC,eAAe,MAAhB,EAFH;AAGD,GAJM,CAAP;AAKD,CAND;;AAUAC,gBAAMC,IAAN;;AAEA,MAAMC,MAAM,wBAAZ;;AAEAA,IAAIC,OAAJ,CAAY,cAAZ;;AAEA;AACAD,IAAIE,GAAJ,CAAQ,OAAR,EAAiBC,eAAKC,IAAL,CAAUC,SAAV,EAAqB,UAArB,CAAjB;AACAL,IAAIE,GAAJ,CAAQ,aAAR,EAAuB,KAAvB;;AAEAF,IAAIM,GAAJ,CAAQ,sBAAO,KAAP,EAAc;AACpBC,QAAM,MAAMP,IAAIQ,GAAJ,CAAQ,KAAR,MAAmB;AADX,CAAd,CAAR;;AAIA;AACAR,IAAIM,GAAJ,CAAQ,SAAR,EAAmBG,kBAAQC,MAAR,CAAeP,eAAKC,IAAL,CAAUC,SAAV,EAAqB,0BAArB,CAAf,CAAnB;AACAL,IAAIM,GAAJ,CAAQ,aAAR,EAAuBG,kBAAQC,MAAR,CAAeP,eAAKC,IAAL,CAAUC,SAAV,EAAqB,8BAArB,CAAf,CAAvB;;AAEAL,IAAIM,GAAJ,CAAQ,WAAR,EAAqBG,kBAAQC,MAAR,CAAeP,eAAKC,IAAL,CAAUC,SAAV,EAAqB,4BAArB,CAAf,CAArB;;AAEAL,IAAIM,GAAJ,CAAQ,UAAR,EAAoBxB,KAAK6B,UAAL,CAAgBC,cAAhB,CAApB;;AAEAZ,IAAIM,GAAJ,CAAQO,qBAAWC,IAAX,EAAR;AACAd,IAAIM,GAAJ,CAAQO,qBAAWE,UAAX,CAAsB,EAACC,UAAU,KAAX,EAAtB,CAAR;AACAhB,IAAIM,GAAJ,CAAQG,kBAAQC,MAAR,CAAeP,eAAKC,IAAL,CAAUC,SAAV,EAAqB,WAArB,CAAf,CAAR;;AAEA;AACAL,IAAIM,GAAJ,CAAQ,GAAR,EAAaW,gBAAb;;AAEAjB,IAAIM,GAAJ,CAAQ,CAACY,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,KAAyB;AAC/B,MAAIH,eAAepC,KAAKwC,yBAAxB,EAAmD;AACjDF,QAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBN,IAAIO,SAAzB;AACA;AACD,GAHD,MAGO,IAAIP,eAAepC,KAAK4C,cAAxB,EAAwC;AAC7CN,QAAIG,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBN,IAAIS,GAAzB;AACA;AACD;AACDN,OAAKH,GAAL,EAR+B,CAQpB;AACZ,CATD;;AAWA;AACAlB,IAAIM,GAAJ,CAAQ,CAACa,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC1B,QAAMH,MAAM,IAAIU,KAAJ,CAAU,WAAV,CAAZ;AACAV,MAAIK,MAAJ,GAAa,GAAb;AACAF,OAAKH,GAAL;AACD,CAJD;;AAMA;AACAlB,IAAIM,GAAJ,CAAQ,CAACY,GAAD,EAAMC,GAAN,EAAWC,GAAX,EAAgBC,IAAhB,KAAyB;AAC/B;AACAD,MAAIG,MAAJ,CAAWL,IAAIK,MAAJ,IAAc,GAAzB,EAA8BM,MAA9B,CAAqC,OAArC,EAA8C,EAACC,SAASZ,IAAIY,OAAd,EAA9C;AACD,CAHD;;kBAKe9B,G","file":"app.js","sourcesContent":["import express from \"express\";\nimport path from \"path\";\nimport logger from \"morgan\";\nimport bodyParser from \"body-parser\";\nimport routes from \"./routes\";\nimport cloudinary from \"cloudinary\";\n\nimport * as line from \"@line/bot-sdk\";\n\nimport line_config from \"./Config/Line\";\nimport cloudinary_config from \"./Config/Cloudinary\";\n\ncloudinary.config(cloudinary_config);\n\nexports.uploads = file => {\n  return new Promise(resolve => {\n    cloudinary.uploader.upload(file, result => {\n      resolve({url: result.url, id: result.public_id});\n    }, {resource_type: \"auto\"});\n  });\n};\n\nimport Store from \"./Services/Store\";\n\nStore.init();\n\nconst app = express();\n\napp.disable(\"x-powered-by\");\n\n// View engine setup\napp.set(\"views\", path.join(__dirname, \"../views\"));\napp.set(\"view engine\", \"pug\");\n\napp.use(logger(\"dev\", {\n  skip: () => app.get(\"env\") === \"test\"\n}));\n\n// serve static and downloaded files\napp.use(\"/static\", express.static(path.join(__dirname, \"../src/Bot/Assets/static\")));\napp.use(\"/downloaded\", express.static(path.join(__dirname, \"../src/Bot/Assets/downloaded\")));\n\napp.use(\"/twibbons\", express.static(path.join(__dirname, \"../src/Bot/Assets/twibbons\")));\n\napp.use(\"/webhook\", line.middleware(line_config));\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended: false}));\napp.use(express.static(path.join(__dirname, \"../public\")));\n\n//  Routes\napp.use(\"/\", routes);\n\napp.use((err, req, res, next) => {\n  if (err instanceof line.SignatureValidationFailed) {\n    res.status(401).send(err.signature);\n    return;\n  } else if (err instanceof line.JSONParseError) {\n    res.status(400).send(err.raw);\n    return;\n  }\n  next(err); // will throw default 500\n});\n\n// Catch 404 and forward to error handler\napp.use((req, res, next) => {\n  const err = new Error(\"Not Found\");\n  err.status = 404;\n  next(err);\n});\n\n// Error handler\napp.use((err, req, res, next) => {\n  // eslint-disable-line no-unused-vars\n  res.status(err.status || 500).render(\"error\", {message: err.message});\n});\n\nexport default app;\n"]}